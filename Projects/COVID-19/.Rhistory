diff_value_avg_3 = c(rep(NA, 2), roll_mean(diff_value, 3))
list(
time = as.integer(date - min(date)),
date = date,
value = value,
lag_value = lag_value,
diff_value = diff_value,
pct_change_value = pct_change_value,
value_avg_3 = value_avg_3,
diff_value_avg_3 = diff_value_avg_3,
lag_4_value = lag_4_value,
lag_5_value = lag_5_value,
lag_6_value = lag_6_value,
cum_diff_value = cum_diff_value,
cum_lag_4_diff_value = cum_lag_4_diff_value,
cum_lag_5_diff_value = cum_lag_5_diff_value,
cum_lag_6_diff_value = cum_lag_6_diff_value,
first_value = date[date == min(date)],
last_value = date[date == max(date)],
value_past_100 = min(date[value >= 100])
)
}, by = list(location_key, location, location_type, data_source, measure)] %>%
pivot_wider(
id_cols = c('location_key', 'location', 'location_type','data_source', 'date', 'time'),
names_from = 'measure',
values_from = c('value', 'lag_value', 'diff_value',
'pct_change_value', 'lag_4_value', 'lag_5_value',
'lag_6_value', 'value_avg_3', 'diff_value_avg_3',
'cum_lag_4_diff_value', 'cum_lag_5_diff_value',
'cum_lag_6_diff_value', 'cum_diff_value')
) %>%
left_join(
state_name_mappings, by = c('location' = 'state_abbr')
) %>%
left_join(
select(population_by_state, state_name, state_pop = value)
) %>%
left_join(
tibble(location = 'United States', us_pop = us_population), by = 'location'
) %>%
mutate(
location_name = ifelse(is.na(state_name), location, state_name),
population = ifelse(is.na(state_pop), us_pop, state_pop),
pop_100k = population/100000,
state_pop = NULL, us_pop = NULL
)
all_covid_data_diffs %>% names()
### get timing of when the 20th case occurred ###
case_20_dates = group_by(all_covid_data_diffs, location_key) %>%
summarize(
date_case_20 = min(date[value_total_cases >= 20]),
has_30_days = as.numeric(max(date[value_total_cases >= 20]) - min(date[value_total_cases >= 20]) >= 30)
)
all_covid_data_diffs_dt = data.table(all_covid_data_diffs)
### one more set of by-state computations, to get r0 and other stats ###
effective_r0_dat = all_covid_data_diffs_dt[, {
# ny = filter(all_covid_data_diffs_dt, location == 'NY')
# attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
tryCatch({
r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
lead(r0_window_size) %>% as.numeric()
}, error = function(e){
print( e)
})
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
# there is some thinking that there is a severe lag in case reporting, use a weeklong lag
# the reason we use lead
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
list(
date = date,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_20_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_first_state_lockdown = as.numeric(date - min(lockdown_start, na.rm = T)),
post_first_lockdown = days_since_first_state_lockdown >= 0,
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
new_deaths_per_100k = cum_diff_value_total_deaths / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
cum_diff_value_total_cases_adj = pmax(cum_diff_value_total_cases, 0),
cum_diff_value_tests_with_results_adj = pmax(cum_diff_value_total_cases_adj, cum_diff_value_tests_with_results, 0),
cum_diff_value_tests_with_results_adj = ifelse(cum_diff_value_tests_with_results_adj == 0, NA, cum_diff_value_tests_with_results_adj)
) %>%
arrange(location_key, date) %>%
filter(
location %in% c(state.abb, 'United States')
)
write.csv(all_covid_data_diffs_dates, 'data/us_covid_data_by_state_with_calcs.csv', row.names = F)
table(all_covid_data_diffs_dates$location_name)
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k)) +
geom_line(aes(colour = location_name))
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k)) +
geom_line(aes(group = location_name))
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k)) +
facet_wrap(~location_name, ncol = 4) %>%
geom_line()
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k)) +
facet_wrap(~location_name, ncol = 4) %>%
geom_line()
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
### one more set of by-state computations, to get r0 and other stats ###
effective_r0_dat = all_covid_data_diffs_dt[, {
# ny = filter(all_covid_data_diffs_dt, location == 'NY')
# attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
# tryCatch({
#   r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
#     lead(r0_window_size) %>% as.numeric()
# }, error = function(e){
#   print( e)
#
# })
#
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
# there is some thinking that there is a severe lag in case reporting, use a weeklong lag
# the reason we use lead
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
deaths_per_100k = value_total_deaths / pop_100k
deaths_per_100k_roll7 = c(rep(NA, 6), roll_mean(deaths_per_100k, 7))
list(
date = date,
deaths_per_100k = deaths_per_100k,
deaths_per_100k_roll7 = deaths_per_100k_roll7,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_20_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_first_state_lockdown = as.numeric(date - min(lockdown_start, na.rm = T)),
post_first_lockdown = days_since_first_state_lockdown >= 0,
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
new_deaths_per_100k = cum_diff_value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
cum_diff_value_total_cases_adj = pmax(cum_diff_value_total_cases, 0),
cum_diff_value_tests_with_results_adj = pmax(cum_diff_value_total_cases_adj, cum_diff_value_tests_with_results, 0),
cum_diff_value_tests_with_results_adj = ifelse(cum_diff_value_tests_with_results_adj == 0, NA, cum_diff_value_tests_with_results_adj)
) %>%
arrange(location_key, date) %>%
filter(
location %in% c(state.abb, 'United States')
)
### one more set of by-state computations, to get r0 and other stats ###
effective_r0_dat = all_covid_data_diffs_dt[, {
# ny = filter(all_covid_data_diffs_dt, location == 'NY')
# attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
# tryCatch({
#   r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
#     lead(r0_window_size) %>% as.numeric()
# }, error = function(e){
#   print( e)
#
# })
#
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
# there is some thinking that there is a severe lag in case reporting, use a weeklong lag
# the reason we use lead
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
deaths_per_100k = value_total_deaths / pop_100k
deaths_per_100k_roll7 = c(rep(NA, 6), roll_mean(deaths_per_100k, 7))
new_deaths_per_100k = cum_diff_value_total_deaths / pop_100k
new_deaths_per_100k_roll7 = c(rep(NA, 6), roll_mean(new_deaths_per_100k, 7))
list(
date = date,
deaths_per_100k = deaths_per_100k,
deaths_per_100k_roll7 = deaths_per_100k_roll7,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
### one more set of by-state computations, to get r0 and other stats ###
effective_r0_dat = all_covid_data_diffs_dt[, {
# ny = filter(all_covid_data_diffs_dt, location == 'NY')
# attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
# tryCatch({
#   r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
#     lead(r0_window_size) %>% as.numeric()
# }, error = function(e){
#   print( e)
#
# })
#
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
# there is some thinking that there is a severe lag in case reporting, use a weeklong lag
# the reason we use lead
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
new_deaths_per_100k = cum_diff_value_total_deaths / pop_100k
new_deaths_per_100k_roll7 = c(rep(NA, 6), roll_mean(new_deaths_per_100k, 7))
list(
date = date,
deaths_per_100k = deaths_per_100k,
deaths_per_100k_roll7 = deaths_per_100k_roll7,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
### one more set of by-state computations, to get r0 and other stats ###
effective_r0_dat = all_covid_data_diffs_dt[, {
# ny = filter(all_covid_data_diffs_dt, location == 'NY')
# attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
# tryCatch({
#   r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
#     lead(r0_window_size) %>% as.numeric()
# }, error = function(e){
#   print( e)
#
# })
#
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
# there is some thinking that there is a severe lag in case reporting, use a weeklong lag
# the reason we use lead
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
new_deaths_per_100k = cum_diff_value_total_deaths / pop_100k
new_deaths_per_100k_roll7 = c(rep(NA, 6), roll_mean(new_deaths_per_100k, 7))
list(
date = date,
new_deaths_per_100k = new_deaths_per_100k,
new_deaths_per_100k_roll7 = new_deaths_per_100k_roll7,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_20_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_first_state_lockdown = as.numeric(date - min(lockdown_start, na.rm = T)),
post_first_lockdown = days_since_first_state_lockdown >= 0,
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
cum_diff_value_total_cases_adj = pmax(cum_diff_value_total_cases, 0),
cum_diff_value_tests_with_results_adj = pmax(cum_diff_value_total_cases_adj, cum_diff_value_tests_with_results, 0),
cum_diff_value_tests_with_results_adj = ifelse(cum_diff_value_tests_with_results_adj == 0, NA, cum_diff_value_tests_with_results_adj)
) %>%
arrange(location_key, date) %>%
filter(
location %in% c(state.abb, 'United States')
)
ggplot(all_covid_data_diffs_dates, aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
all_covid_data_diffs_dates %>% filter(location_name %in% c('Florida', 'California', 'Texas', 'New York', 'Arizona')) %>%
ggplot(aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
all_covid_data_diffs_dates %>% filter(location_name %in% c('Florida', 'California', 'Texas', 'New York', 'Arizona', 'Michigan')) %>%
ggplot(aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
all_covid_data_diffs_dates %>% filter(location_name %in% c('Florida', 'California', 'Texas', 'New York', 'Arizona', 'Michigan', 'Alabama', 'South Carolina')) %>%
ggplot(aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
all_covid_data_diffs_dates %>% filter(location_name %in% c('Florida', 'California', 'Texas', 'New York', 'Arizona',
'Michigan', 'North Carolina', 'South Carolina')) %>%
ggplot(aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
all_covid_data_diffs_dates %>% filter(location_name %in% c('Florida', 'California', 'Texas', 'New York', 'Arizona',
'Michigan', 'Georgia', 'South Carolina')) %>%
ggplot(aes(date, new_deaths_per_100k_roll7)) +
facet_wrap(~location_name, ncol = 4) +
geom_line()
