predict(r0_median_model, newdata = test_dat) %>% exp()
r0_mean_model = lm(log(r0_rolling_lead_7) ~ lockdown_period  + as.numeric(date), data = all_covid_data_diffs_dates)
r0_median_model = rq(log(r0_rolling_lead_7) ~ lockdown_period  + as.numeric(date), data = all_covid_data_diffs_dates, tau = 0.5)
test_dat = expand.grid(
lockdown_period = c('Pre-Lockdown', 'Post-Lockdown'),
date = as.Date('2020-03-20'),
post_first_lockdown = TRUE
)
predict(r0_median_model, newdata = test_dat) %>% exp()
test_dat = expand.grid(
lockdown_period = c('Pre-Lockdown', 'Post-Lockdown'),
date = as.Date('2020-03-15'),
post_first_lockdown = TRUE
)
predict(r0_median_model, newdata = test_dat) %>% exp()
summary(r0_median_model)
r0_stats_by_date = group_by(all_covid_data_diffs_dates, date, lockdown_period) %>%
summarize(
obs = n(),
median_r0 = median(r0_rolling_lead_7, na.rm = T),
mean_r0 = mean(r0_rolling_lead_7, na.rm = T),
q25 = quantile(r0_rolling_lead_7, probs = 0.25, na.rm = T),
q75 = quantile(r0_rolling_lead_7, probs = 0.75, na.rm = T)
) %>%
filter(!is.na(median_r0)) %>%
mutate(
pct_of_states = obs/sum(obs)
)
ggplot(r0_stats_by_date, aes(date, median_r0, colour = lockdown_period)) +
geom_hline(aes(yintercept = 1), colour = 'firebrick', size = 0.75, linetype = 'dashed') +
# geom_ribbon(aes(ymin = q25, ymax = q75, fill = lockdown_period), alpha = 0.3) +
# facet_wrap(~lockdown_period, ncol = 1) +
theme_bw() +
geom_line(size = 0.75) +
# geom_point(aes(size = pct_of_states)) +
labs(
x = '', y = 'Median Rolling 7-Day R0',
caption = 'Chart: Taylor G. White\nData: covidtracking.com',
title = 'COVID-19 Rolling 7-Day Reproduction Number (R0) by Lockdown Status',
subtitle = sprintf('U.S. states, through %s. Data is lagged by one week for case delay and one week to observe follow-on cases for R0 computation. R0 < 1 means the rate of new cases is decreasing.',
max(all_covid_data_diffs_dates$date) %>% format('%B %d')
) %>% str_wrap(115)
) +
theme(
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
title = element_text(size = 14),
plot.subtitle = element_text(size = 11, face = 'italic'),
plot.caption = element_text(size = 10, face = 'italic', hjust = 0),
legend.position = 'right'
) +
scale_size(name = '% of States', range = c(1, 4), labels = percent) +
scale_colour_hue(name = 'Period') +
scale_y_continuous(breaks = seq(0, 15, by = 1))
ggsave('output/rolling_ro_trend_by_lockdown_status.png', height = 8, width = 10, units = 'in', dpi = 800)
latest_state_data = filter(all_covid_data_diffs_dates, location != 'United States', date == max(date)) %>%
arrange(-value_total_cases) %>%
mutate(
location_factor = factor(location, levels = location)
)
all_covid_data_diffs_dates$location_factor = factor(all_covid_data_diffs_dates$location,
levels = latest_state_data$location)
filter(all_covid_data_diffs_dates,
location %in% head(latest_state_data, 50)$location, date >= as.Date('2020-03-11')) %>%
ggplot() +
facet_wrap(~location_factor, scales = 'free_y', ncol = 5) +
geom_area(aes(date, rolling7_tests_with_results), fill = 'black', alpha = .4) +
# geom_area(aes(date, rolling7_percent_positive_new_tests), fill = 'black', alpha = .4) +
geom_line(aes(date, rolling3_new_cases), colour = 'blue', size = 0.75) +
# geom_point(aes(date, rolling3_percent_positive_new_tests), colour = 'blue') +
# geom_point(aes(date, rolling3_percent_positive_new_tests, size = new_cases_per_100k), colour = 'red') +
scale_size(range = c(1, 5)) +
scale_y_continuous(labels = comma) +
theme_classic() +
labs(
y = '3 Day Average of New Cases', x = ''
)
ggsave('output/three_vs_seven_day_avg_positive_tests.png', height = 16, width = 16, units = 'in', dpi = 800)
## compute stats by lockdown period
state_lockdown_period_calcs = group_by(all_covid_data_diffs_dates, location, lockdown_period) %>%
summarize(
period_start = min(date[value_total_cases > 0]),
period_end = max(date[value_total_cases > 0]),
period_length = as.numeric(period_end - period_start),
starting_cases = min(value_total_cases[value_total_cases > 0]),
ending_cases = max(value_total_cases[value_total_cases > 0]),
period_r0 = est_r0_window(cum_diff_value_total_cases, catch = T),
period_daily_geometric_growth = (ending_cases / starting_cases)^(1/length(value_total_cases[value_total_cases > 0])) - 1
) %>%
filter(location != 'United States', !is.na(lockdown_period), !is.na(ending_cases), location %in% state.abb)
# push wide
wide_state_lockdown_period_calcs = pivot_wider(state_lockdown_period_calcs,
id_cols = c('location'),
names_from = lockdown_period,
values_from = c('period_r0', 'period_end','period_daily_geometric_growth', 'starting_cases', 'ending_cases'))
names(wide_state_lockdown_period_calcs) = str_replace_all(names(wide_state_lockdown_period_calcs), '[ \\-]', '_')
#### compute stats by lockdown status #####
lockdown_period_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
obs = length(r0_rolling_lead_7[!is.na(r0_rolling_lead_7)]),
median_r0_rolling_7 = median(r0_rolling_lead_7, na.rm = T),
mean_r0_rolling_7 = mean(r0_rolling_lead_7, na.rm = T)
)
lockdown_period_stats_days = group_by(all_covid_data_diffs_dates, days_since_lockdown_start, lockdown_period) %>%
summarize(
obs = length(r0_rolling_lead_7[!is.na(r0_rolling_lead_7)]),
median_r0_rolling_7 = median(r0_rolling_lead_7, na.rm = T),
q25 = quantile(r0_rolling_lead_7, probs = 0.25, na.rm = T),
q75 = quantile(r0_rolling_lead_7, probs = 0.75, na.rm = T),
q10 = quantile(r0_rolling_lead_7, probs = 0.10, na.rm = T),
q90 = quantile(r0_rolling_lead_7, probs = 0.90, na.rm = T)
) %>%
filter(obs > 0)
pal_3 = brewer.pal(3, 'Set1')
r0_boxplot = ggplot(all_covid_data_diffs_dates, aes(lockdown_period, r0_rolling_lead_7, fill = lockdown_period)) +
theme_minimal() +
geom_boxplot(colour = 'gray', size =  0.25) +
# geom_text(data = lockdown_period_stats, aes(y = median_r0_rolling_7, label = paste('Median:', round(median_r0_rolling_7, 2))), fontface = 'bold', size = 2.5)  +
labs(
x = '', y = 'Rolling 7-Day R0'
# ,title = 'COVID-19 Rolling 7-Day R0 by Lockdown Status',
# subtitle = sprintf('U.S. states, through %s', max(all_covid_data_diffs_dates$date) %>% format('%B %d'))
# caption = 'Chart: Taylor G. White\nData: covidtracking.com'
) +
scale_y_continuous(limits = c(0, 15)) +
theme(
plot.margin = margin(0.25, 0.25, 0.25, 0.25, "cm"),
text = element_text(colour = 'white'),
title = element_text(colour = 'white'),
axis.text = element_text(colour = 'white'),
plot.caption = element_text(hjust = 0, face = 'italic', size = 10),
plot.subtitle = element_text(face = 'italic', size = 11),
plot.background = element_rect(fill = 'black'),
panel.background = element_rect(fill = 'black'),
panel.grid = element_line(size = 0.25, colour = 'white')
) +
scale_fill_manual(guide = F, values = c('Pre-Lockdown' = pal_3[1], 'Post-Lockdown' = pal_3[2], 'No Lockdown' = pal_3[3]))
lockdown_states = lockdown_period_stats_days %>%
filter(lockdown_period != 'No Lockdown')
lockdown_effects_wide = pivot_wider(lockdown_period_stats %>% select(lockdown_period, median_r0_rolling_7), names_from =  c('lockdown_period'), values_from = c('median_r0_rolling_7'))
lockdown_effect = 1 - lockdown_effects_wide$`Post-Lockdown`/lockdown_effects_wide$`Pre-Lockdown`
ggplot(lockdown_states, aes(days_since_lockdown_start, median_r0_rolling_7, fill = lockdown_period)) +
# theme_classic() +
theme_bw() +
# geom_ribbon(aes(ymin = q10, ymax = q90), alpha = 0.3, size = 0) +
geom_ribbon(aes(ymin = q25, ymax = q75), alpha = 0.3, size = 0) +
geom_line(aes(colour = NULL, fill = NULL), colour = 'gray') +
geom_line(aes(colour = lockdown_period)) +
geom_point(aes(size = obs, colour = lockdown_period))  +
labs(
x = 'Days Pre/Post Lockdown', y = 'Rolling 7-Day R0',
caption = 'Chart: Taylor G. White\nData: covidtracking.com',
title = 'COVID-19 Rolling 7-Day Reproduction Number (R0) by Lockdown Status',
subtitle = sprintf('U.S. states, through %s. State lockdowns are associated with a %s decrease in COVID-19 transmission (median R0 of %s down to %s), though many areas experienced decreased transmission pre-lockdown because other states shut down. Lines show median R0 and ribbons represent the 25th and 75th percentiles.',
max(all_covid_data_diffs_dates$date) %>% format('%B %d'),
percent(lockdown_effect, accuracy = 1),
round(lockdown_effects_wide$`Pre-Lockdown`, 2),
round(lockdown_effects_wide$`Post-Lockdown`, 2)
) %>% str_wrap(115)
) +
theme(
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
title = element_text(size = 14),
plot.subtitle = element_text(size = 11, face = 'italic'),
plot.caption = element_text(size = 10, face = 'italic', hjust = 0),
legend.position = 'bottom'
) +
scale_colour_manual(name = '', values = c('Pre-Lockdown' = pal_3[1], 'Post-Lockdown' = pal_3[2], 'No Lockdown' = pal_3[3])) +
scale_fill_manual(name = '', values = c('Pre-Lockdown' = pal_3[1], 'Post-Lockdown' = pal_3[2], 'No Lockdown' = pal_3[3])) +
scale_size(name = '# of States', range = c(0.5, 3)) +
scale_y_continuous(breaks = seq(0, 20, by = 1)) +
scale_x_continuous(limits = c(-30, max(lockdown_states$days_since_lockdown_start, na.rm = T)),
breaks = seq(-30, max(lockdown_states$days_since_lockdown_start, na.rm = T), by = 2)) +
annotation_custom(ggplotGrob(r0_boxplot), xmin = -10, xmax = 12, ymin = 8, ymax = 17)
ggsave('output/rolling_r0_by_lockdown_period.png', height = 7, width = 9, units = 'in', dpi = 800)
#### plot across date scale ####
post_ending_cases = filter(state_lockdown_period_calcs, lockdown_period != 'Pre-Lockdown') %>%
arrange(-ending_cases)
state_lockdown_period_calcs = state_lockdown_period_calcs %>%
mutate(
location_factor = factor(location, levels = rev(post_ending_cases$location))
)
location_levels = filter(latest_state_data_sub, location %in% selected_locations) %>% pull(location_name)
location_sub = filter(all_covid_data_diffs_dates, location %in% selected_locations) %>%
mutate(
location_name = factor(location_name, levels = location_levels)
)
##### show relationship between geometric daily growth vs R0 ####
ggplot(state_lockdown_period_calcs, aes(period_daily_geometric_growth, period_r0)) +
# geom_path(colour = 'white') +
# theme_dark() +
geom_point(aes(colour = lockdown_period, size = ending_cases, alpha = period_length)) +
# theme_classic() +
theme_bw() +
theme(
# plot.background = element_rect(fill= 'black'),
# panel.background = element_rect(fill = 'black'),
# panel.grid = element_line(colour = 'white')
# panel.border = element_rect(colour='white')
# axis.line = element_line(colour = 'white')
) +
scale_y_continuous(breaks = seq(0, 13, by = 1)) +
scale_alpha(guide = F) +
scale_x_continuous(labels = percent, breaks = seq(0, 0.6, by = 0.1), limits = c(0, 0.6)) +
labs(
x = '\nDaily Average Growth', y = 'Reproduction Number (R0)\n',
title = 'COVID-19 Daily Average Case Growth and R0, Pre vs. Post Lockdown',
subtitle = sprintf('U.S. States, through %s', max(state_lockdown_period_calcs$period_end) %>% format('%B %d'))
) +
scale_colour_hue(name = 'Period') +
scale_size(name = 'Ending Cases', labels = comma)
ggsave('output/daily_average_case_growth_versus_r0.png', height = 6, width = 8, units = 'in', dpi = 800)
##### plot effective r0 versus lockdown dates #####
selected_early_states = filter(all_covid_data_diffs_dates, location %in% c('CA', 'NY', 'WA'))
all_covid_data_diffs_dates %>% filter(location %in% c('NY', 'CA', 'WA'), !is.na(r0_rolling), days_since_case_20 >= 5) %>%
ggplot(aes(date, r0_rolling)) +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
facet_wrap(~location_name) +
scale_size(range = c(0.5, 4)) +
# scale_alpha(range = c(0.5, 1)) +
geom_line(colour = 'blue') +
geom_point(aes(size = cum_diff_value_total_cases,  colour = weekend_ind)) +
labs(y = 'Seven-Day R0 of New Cases', x = '') +
# stat_smooth(method = 'gam') +
geom_vline(data = latest_state_data %>% filter(location %in% c('NY', 'CA', 'WA')), aes(xintercept = lockdown_start))
ggsave('output/rolling_ro_by_early_states.png', height = 4, width = 9, units = 'in', dpi = 800)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = lockdown_start)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = NULL, y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown Effects: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, below which is decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
# ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
same_scale_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4)
# ggsave('output/effective_r0_top_12_states.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = same_scale_plot)
# select(all_covid_data_diffs_dates, has_30_days, date, location_name, diff_value_total_tests, value_total_tests, new_tests_per_100k) %>% View()
##### plot new cases per 100k vs percent positive new cases #####
all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0, location %in% c('NY', 'LA', 'CA', 'MI')) %>%
ggplot(aes(days_since_case_20, new_cases_per_100k)) +
geom_point(aes(alpha = days_since_case_20, colour = location, size = new_tests_per_100k))
# coord_cartesian(xlim = c(0, 1))
##### plot tests per 100k #####
all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0, location == 'United States') %>%
ggplot(aes(days_since_case_20, new_tests_per_100k)) +
theme_bw() +
geom_bar(stat = 'identity') +
geom_line(aes(y = diff_value_avg_3_total_tests_per_100k), colour = 'red', size = 1) +
labs(
x = '\nDays Since Case 20',
y = 'Daily Tests Per 100k Population\n',
title = 'COVID-19 Tests Per 100k Population',
subtitle = sprintf('United States, through %s. Red line is the rolling 3-day average.', max(all_covid_data_diffs_dates$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com'
) +
scale_y_continuous(breaks = seq(0, 500, by = 100)) +
scale_x_continuous(breaks = seq(0, 30, by = 5)) +
theme(
title = element_text(size = 16),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(hjust = 0, face = 'italic', size = 10)
)
ggsave('output/us_daily_covid_tests_per_day.png', height = 6, width = 8, units = 'in', dpi = 800)
##### plot states with earliest infections #####
all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0, has_30_days, location != 'United States') %>%
ggplot(aes(days_since_case_20, cases_per_100k, colour = location_name)) +
theme_bw() +
geom_line(data = filter(all_covid_data_diffs_dates, days_since_case_20 >= 0, !has_30_days), aes(group = location_name), colour = 'black', alpha = 0.5) +
geom_line(size = 1) +
geom_point() +
labs(
x = '\nDays Since Case 20',
y = 'Cases Per 100k Population\n',
title = 'COVID-19 Cases Per 100k Population',
subtitle = sprintf('Selected U.S. states, through %s.', max(all_covid_data_diffs_dates$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com'
) +
scale_y_continuous(breaks = seq(0, 6000, by = 1000), labels = comma) +
scale_x_continuous(breaks = seq(0, 30, by = 5)) +
theme(
title = element_text(size = 16),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(hjust = 0, face = 'italic', size = 10)
) +
scale_colour_hue(name = '')
ggsave('output/cases_per_100k_early_states.png', height = 6, width = 8, units = 'in', dpi = 800)
# check to make sure the population data looks good
select(all_covid_data_diffs_dates, location, population) %>%
data.table() %>%
unique(by = 'location')
##### create map for all 50 states #####
US_state_data = left_join(us_sf, latest_state_data, by = c('iso_3166_2' = 'location')) %>% left_join(state_geo_center, by = c('iso_3166_2' = 'state_abbr'))
ggplot() +
geom_sf(data = US_state_data, aes(fill = log(cases_per_100k)), alpha = 0.75, size = 0.25) +
scale_fill_viridis(guide = F, option = 'C') +
geom_sf_text(data = US_state_data, aes(long, lat, label = comma(cases_per_100k, accuracy = 1)),
colour = 'black', fontface='bold', size = 2) +
theme_map() +
labs(x = '', y = '',
caption = 'Chart: Taylor G. White\nData: covidtracking.com',
title = 'U.S. COVID-19 Cases by State, Per 100k Population', subtitle = sprintf('As of %s',
unique(format(latest_state_data$date, '%B %d')))) +
theme(
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size = 16),
plot.subtitle = element_text(size = 11),
plot.caption = element_text(hjust = 0, face = 'italic', size = 10)
)
ggsave('output/latest_cv_state_map_50.png', height = 6, width = 8, units = 'in', dpi = 800)
# world <- ne_countries(scale = "medium", returnclass = "sf")
# usa <- subset(world, admin == "United States of America")
##### take a look at testing data, normed by population information #####
#### plot overall cfr and positive tests ####
ggplot(latest_state_data, aes(value_percent_positive_cases, value_case_fatality_rate, size = cases_per_100k)) +
theme_bw() +
geom_text(aes(label = location), show.legend = F) +
scale_alpha(range = c(0.2, 1)) +
scale_size(guide = F, range = c(2, 6)) +
geom_hline(aes(yintercept = 0.01)) +
scale_y_continuous(breaks = seq(0, 0.1, by = 0.01), labels = percent) +
scale_x_continuous(labels = percent, breaks = seq(0, 0.5, by = 0.05)) +
labs(
x = 'Percent Positive Tests', y = 'Case Fatality Rate',
title = 'COVID-19 Case Fatality Rates vs. Percent Positive Tests',
subtitle = sprintf('U.S. states, through %s. Latest data shown for each state.', max(all_covid_data_diffs_dates$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, FRED'
) +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic')
) +
# stat_smooth(method = 'lm', formula = y ~ poly(x, 4), show.legend = F, se = F) +
stat_smooth(method = 'gam', se=F)
ggsave('output/all_states_positive_cases_vs_case_fatality_rate.png', height = 6, width = 8, units = 'in', dpi = 800)
#### plot paths of selected states' CFR versus positive tests ####
selected_locations = c(
head(latest_state_data, 10)$location
)
cfr_path_dat = filter(all_covid_data_diffs_dates, location %in%  selected_locations, days_since_case_20 >= 15)
last_cfr_path_dat = filter(cfr_path_dat, date == max(date))
cfr_path_plot = cfr_path_dat %>%
ggplot(aes(value_percent_positive_cases, value_case_fatality_rate, colour = location_factor)) +
scale_size(guide = F, range = c(0, 3)) +
scale_alpha(guide = F, range = c(0.3, 0.8)) +
geom_point(aes(alpha = days_since_case_20, size = log(value_total_cases))) +
geom_path(aes(alpha = days_since_case_20), size = 0.75) +
geom_text_repel(data = last_cfr_path_dat, aes(label = location_factor)) +
scale_y_continuous(breaks = seq(0, 0.1, by = 0.01), labels = percent) +
scale_x_continuous(labels = percent, breaks = seq(0, 0.7, by = 0.1)) +
theme(
strip.background = element_rect(fill = 'darkgray'),
strip.text = element_text(face = 'bold'),
text = element_text(colour = 'white'),
axis.text = element_text(colour = 'white'),
title = element_text(size = 16, colour = 'white'),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
plot.background = element_rect(fill = 'black'),
legend.background = element_rect(fill = 'black'),
panel.background = element_rect(fill = 'black'),
panel.grid.minor  = element_blank(),
panel.grid.major = element_line(size = 0.25),
legend.position = 'bottom'
) +
guides(colour = guide_legend(override.aes = list(size = 2))) +
scale_colour_hue(name = '') +
labs(
x = '\nPercent Positive Tests', y = 'Case Fatality Rate\n',
title = 'Paths of Case Fatality Rates and Positive Test Rates',
subtitle = sprintf('U.S. and selected states, through %s. Data shown from 15 days following 20th case.', max(all_covid_data_diffs_dates$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com'
)
ggsave('output/positive_cases_vs_case_fatality_rate.png', height = 8, width = 10, units = 'in', dpi = 800, plot = cfr_path_plot)
dark_theme = theme(
strip.background = element_rect(fill = 'darkgray'),
strip.text = element_text(face = 'bold'),
text = element_text(colour = 'white'),
axis.text = element_text(colour = 'white'),
title = element_text(size = 16, colour = 'white'),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
legend.title = element_text(size = 14),
plot.subtitle = element_text(size = 11, face = 'italic'),
plot.background = element_rect(fill = 'black'),
legend.background = element_rect(fill = 'black'),
panel.background = element_rect(fill = 'black'),
panel.grid.minor  = element_blank(),
panel.grid.major = element_line(size = 0.25),
panel.grid.major.x = element_blank(),
legend.position = 'bottom',
axis.ticks = element_line(colour = 'white')
)
case_fatality_lines_by_state = filter(all_covid_data_diffs_dates, days_since_case_20 >= 0, location_type == 'US State') %>%
ggplot( aes(days_since_case_20, value_case_fatality_rate)) +
theme_bw() +
geom_hline(aes(yintercept = 0.01), colour = '#1b9e77', size = 0.75, linetype='dashed') +
geom_line(aes(group = location, alpha = days_since_case_20),  colour = 'white') +
scale_alpha(guide = F, range = c(0.15, 0.5)) +
scale_y_continuous(labels = percent, breaks = seq(0, 0.17, by = 0.02), limits = c(0, 0.17)) +
scale_x_continuous(breaks = seq(5, 30, by = 5), limits = c(5, max(all_covid_data_diffs_dates$days_since_case_20))) +
geom_line(data = filter(all_covid_data_diffs_dates, days_since_case_20 >= 0, location_type != 'US State'),  aes(colour = location), size = 1) +
geom_point(data = filter(all_covid_data_diffs_dates, days_since_case_20 >= 0, location_type != 'US State'), aes(colour = location), size = 1) +
labs(
x = 'Days Since Case 20', y = 'Case Fatality Rate',
title = 'COVID-19 Case Fatality Rates Over Time',
subtitle = sprintf('By U.S. state, through %s', max(all_covid_data_diffs_dates$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com'
) +
# theme(
#   title = element_text(size = 16),
#   axis.title = element_text(size = 14),
#   legend.text = element_text(size = 12),
#   plot.caption = element_text(size = 10, hjust = 0),
#   legend.title = element_text(size = 14),
#   plot.subtitle = element_text(size = 11, face = 'italic'),
#   legend.position = 'bottom'
# ) +
dark_theme +
scale_colour_manual(name = '', labels = c('United States' = 'U.S. Overall'), values = c('#d95f02'))
# ggsave('output/case_fatality_rate_by_state.png', height = 7, width = 7, units = 'in', dpi = 800, plot = case_fatality_lines_by_state)
#### estimate effects of reduced transmission on case load ####
# ny_data = all_covid_data_diffs_dates %>% filter(location %in% c('CA'))
# https://stats.stackexchange.com/questions/160552/why-is-nls-giving-me-singular-gradient-matrix-at-initial-parameter-estimates
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6962332/
# https://www.medrxiv.org/content/10.1101/2020.04.02.20051466v1.full.pdf
# get_r0_nls = function(df) {
#   model.0 = lm(log(value_total_cases) ~ I(time/6.4), data = df)
#   simple_exponential_model = nls(value_total_cases ~  case_networks * r0^(time/6.4), data = df,
#                                  start = list(case_networks = exp(coef(model.0)[1]), r0 = coef(model.0)[2]))
#   return(simple_exponential_model)
# }
#
# pre_lockdown = get_r0_nls(ny_data)
# # summary(pre_lockdown)
# # est_r0_window(ny_data$cum_diff_value_total_cases)
#
# ny_data$pred = predict(pre_lockdown)
# ggplot(ny_data, aes(time)) +
#   geom_line(aes(y=pred)) +
#   geom_line(aes(y = value_total_cases), colour = 'red')
#
# Solve and plot.
# pars vector with 2 values: the transmission and recovery rates. The names of these
# values must be "beta", and "gamma", respectively.
# init vector with 3 values: the initial proportion of susceptibles, infectious and recovered. The names of these values must be "S", "I" and "R", respectively.
# time time sequence for which output is wanted; the first value of times must be the
# initial time.
# ... further arguments passed to ode function.
##### load and clean county covid data #####
# https://transportgeography.org/?page_id=8565
# https://en.wikipedia.org/wiki/Gravity_model_of_trade
# use county by county commute flows as distance estimate or input to gravitational model
# what proportion of the combined counties' population flows between the two counties?
# what proportion of the combined counties' commuters flows between the two counties?
# flights between cities
# https://www.researchgate.net/profile/N_Pavlis/publication/226883469_A_Preliminary_Gravitational_Model_to_Degree_2160/links/53ff0a6c0cf283c3583c3ff9.pdf
nyt_county_data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv') %>%
arrange(county, state, fips, date)
latest_county_data = group_by(nyt_county_data, county, state, fips) %>%
summarize(
latest_date = max(date),
latest_cases = tail(cases, 1),
latest_deaths = tail(deaths, 1)
)
all_county_data_geo = left_join(us_counties_tigris@data, nyt_county_data, by = c('GEOID' = 'fips')) %>%
mutate(
lat = as.numeric(INTPTLAT),
long = as.numeric(INTPTLON)
)
latest_county_data_geo = left_join(us_counties_tigris@data, latest_county_data, by = c('GEOID' = 'fips')) %>%
mutate(
lat = as.numeric(INTPTLAT),
long = as.numeric(INTPTLON)
)
