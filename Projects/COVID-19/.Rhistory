# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
if (length(cum_diff_value_tests_with_results) < 6) {
rolling3_tests_with_results = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling7_tests_with_results = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling3_new_cases = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling3_percent_positive_new_tests = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling7_percent_positive_new_tests = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
r0_rolling_lead_7 = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
effective_r0_interpolated_lead_7 = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
} else {
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
}
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
# limit R0 to 30 max and 0 min
r0_rolling_lead_7 = pmin(r0_rolling_lead_7, 30)
r0_rolling_lead_7 = pmax(r0_rolling_lead_7, 0)
list(
date = date,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
}, by = list(location_key, location)]
covid_cases_mobility_stringency = fread('data/covid_cases_mobility_stringency.csv') %>%
mutate(
date = as.Date(date),
country = country_name.x,
state = as.character(NA),
location = entity_name,
location_type = ifelse(country == location, 'country', 'County')
) %>%
select(
date, country, location, location_type, StringencyIndex, mobility, predicted_walking_baseline,
percent_of_predicted, smoothed_percent_of_predicted, fips
)
fips_by_area = group_by(covid_cases_mobility_stringency, location) %>%
summarize(
fips = fips[!is.na(fips)][1] %>% as.character()
)
covid_cases_mobility_stringency_fin = left_join(covid_cases_mobility_stringency %>% select(-fips), fips_by_area)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_20_dates) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(effective_r0_dat) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(effective_r0_dat) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(effective_r0_dat) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
a = filter(all_covid_data_diffs_dates, location == 'California')
ggplot(a, aes(date, diff_value_avg_3_total_tests_per_100k)) +
geom_bar()
ggplot(a, aes(date, diff_value_avg_3_total_tests_per_100k)) +
geom_bar(stat = 'identity')
ggplot(a, aes(date, r0_rolling_lead_7)) +
geom_bar(stat = 'identity')
a$r0_rolling_lead_7
a = filter(all_covid_data_diffs_dates, location == 'New York')
ggplot(a, aes(date, diff_value_avg_3_total_tests_per_100k)) +
geom_bar(stat = 'identity')
ggplot(a, aes(date, r0_rolling_lead_7)) +
geom_bar(stat = 'identity')
ny = filter(covid_data_diffs_excl_county, location == 'NY')
cat("\nkey ==",.BY[[1]],"\n\n")
cum_diff_value_total_cases[value_total_cases == 0] = NA
attach(ny)
cum_diff_value_total_cases[value_total_cases == 0] = NA
cum_diff_value_total_cases
# what is the r0 of cases on a rolling 6 day basis? This uses the last six days, computes r0, and then pushes the computations
# forward six days to show the r0 of the cases themselves
new_cases_zoo = zoo(cum_diff_value_total_cases, 1:length(cum_diff_value_total_cases))
new_cases_zoo
r0_rolling = rep(NA, length(new_cases_zoo)) %>% as.numeric()
r0_rolling
r0_window_size
if (length(r0_rolling)>= r0_window_size) {
tryCatch({
r0_rolling = c(rep(NA, r0_window_size-1), rollapply(new_cases_zoo %>% na.approx(new_cases_zoo, na.rm = F), r0_window_size, est_r0_window)) %>%
lead(r0_window_size) %>% as.numeric()
}, error = function(e){
print( e)
})
}
r0_rolling
# Median is 5.1 days, mean is 6.4 days
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7014672/
effective_r0 = cum_diff_value_total_cases / cum_lag_6_diff_value_total_cases
#
# # there are NAs because of the lags, there are infinite values because of missing data
effective_r0_nas = ifelse(is.infinite(effective_r0) | effective_r0 == 0, NA, effective_r0) %>% as.numeric()
#
# # interpolate the cases
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
#
# # there are data integrity issues. Limit max r0 to 20 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 20)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
# this needs to be pushed back to where the cases originated
effective_r0_interpolated_lead = lead(effective_r0_interpolated, 6)
# get rolling average positive tests for last seven days
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
length(cum_diff_value_tests_with_results) < 6
if (length(cum_diff_value_tests_with_results) < 6) {
rolling3_tests_with_results = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling7_tests_with_results = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling3_new_cases = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling3_percent_positive_new_tests = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
rolling7_percent_positive_new_tests = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
r0_rolling_lead_7 = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
effective_r0_interpolated_lead_7 = rep(NA, length(cum_diff_value_tests_with_results)) %>% as.numeric()
} else {
rolling3_tests_with_results = c(rep(NA, 2), roll_mean(cum_diff_value_tests_with_results, 3))
rolling7_tests_with_results = c(rep(NA, 6), roll_mean(cum_diff_value_tests_with_results, 7))
rolling3_new_cases = c(rep(NA, 2), roll_mean(cum_diff_value_total_cases, 3))
rolling3_percent_positive_new_tests = c(rep(NA, 2), roll_mean(percent_positive_new_tests, 3))
rolling7_percent_positive_new_tests = c(rep(NA, 6), roll_mean(percent_positive_new_tests, 7))
delta_roll_3_7 = rolling3_percent_positive_new_tests - rolling7_percent_positive_new_tests
r0_rolling_lead_7 = lead(r0_rolling, 7)
effective_r0_interpolated_lead_7 = lead(effective_r0_interpolated, 7)
}
lag_percent_positive_new_tests = lag(percent_positive_new_tests, 1)
delta_percent_positive_new_tests = percent_positive_new_tests - lag_percent_positive_new_tests
# limit R0 to 30 max and 0 min
r0_rolling_lead_7 = pmin(r0_rolling_lead_7, 30)
r0_rolling_lead_7 = pmax(r0_rolling_lead_7, 0)
list(
date = date,
effective_r0_interpolated = effective_r0_interpolated_lead,
effective_r0_interpolated_lead_7 = effective_r0_interpolated_lead_7,
r0_rolling = r0_rolling,
r0_rolling_lead_7 = r0_rolling_lead_7,
percent_positive_new_tests = percent_positive_new_tests,
lag_percent_positive_new_tests = lag_percent_positive_new_tests,
delta_percent_positive_new_tests = delta_percent_positive_new_tests,
rolling3_new_cases = rolling3_new_cases,
rolling3_tests_with_results = rolling3_tests_with_results,
rolling7_tests_with_results = rolling7_tests_with_results,
rolling3_percent_positive_new_tests = rolling3_percent_positive_new_tests,
rolling7_percent_positive_new_tests = rolling7_percent_positive_new_tests,
delta_roll_3_7_percent_positive_new_tests = delta_roll_3_7
)
detach(ny)
filter(effective_r0_dat, location == 'NY')
filter(effective_r0_dat, location == 'NY') %>% View()
covid_cases_mobility_stringency = fread('data/covid_cases_mobility_stringency.csv') %>%
mutate(
date = as.Date(date),
country = country_name.x,
state = as.character(NA),
location = entity_name,
location_type = ifelse(country == location, 'country', 'County')
) %>%
select(
date, country, location, location_type, StringencyIndex, mobility, predicted_walking_baseline,
percent_of_predicted, smoothed_percent_of_predicted, fips
)
fips_by_area = group_by(covid_cases_mobility_stringency, location) %>%
summarize(
fips = fips[!is.na(fips)][1] %>% as.character()
)
covid_cases_mobility_stringency_fin = left_join(covid_cases_mobility_stringency %>% select(-fips), fips_by_area)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(effective_r0_dat) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
left_join(effective_r0_dat) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
a = filter(all_covid_data_diffs_dates, location == 'New York')
ggplot(a, aes(date, diff_value_avg_3_total_tests_per_100k)) +
geom_bar(stat = 'identity')
ggplot(a, aes(date, r0_rolling_lead_7)) +
geom_bar(stat = 'identity')
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
left_join(effective_r0_dat) %>%
mutate(
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
write.csv(all_covid_data_diffs_dates, 'data/countries_states_county_covid_calcs.csv', row.names = F)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
left_join(effective_r0_dat) %>%
mutate(
location = recode(location, `Korea, South` = "South Korea"),
location = ifelse(location_type == 'US State', state, location)
) %>%
left_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
left_join(effective_r0_dat) %>%
mutate(
location = recode(location, `Korea, South` = "South Korea"),
location = ifelse(location_type == 'US State', state, location)
) %>%
full_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
write.csv(all_covid_data_diffs_dates, 'data/countries_states_county_covid_calcs.csv', row.names = F)
covid_cases_mobility_stringency_fin %>%
filter(
location == 'South Korea'
)
filter(all_covid_data_diffs_clean, location == 'Korea, South')
filter(all_covid_data_diffs_clean, location == 'Korea, South')$country
covid_cases_mobility_stringency = fread('data/covid_cases_mobility_stringency.csv') %>%
mutate(
date = as.Date(date),
country = country_name.x,
country = recode(country, `Korea, South` = "South Korea"),
state = as.character(NA),
location = entity_name,
location_type = ifelse(country == location, 'country', 'County')
) %>%
select(
date, country, location, location_type, StringencyIndex, mobility, predicted_walking_baseline,
percent_of_predicted, smoothed_percent_of_predicted, fips
)
fips_by_area = group_by(covid_cases_mobility_stringency, location) %>%
summarize(
fips = fips[!is.na(fips)][1] %>% as.character()
)
covid_cases_mobility_stringency_fin = left_join(covid_cases_mobility_stringency %>% select(-fips), fips_by_area)
covid_cases_mobility_stringency_fin %>%
filter(
location == 'South Korea'
)
covid_cases_mobility_stringency_fin %>%
filter(
location == 'South Korea'
) %>% View()
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs_clean, case_dates) %>%
left_join(effective_r0_dat) %>%
mutate(
location = recode(location, `Korea, South` = "South Korea"),
country = recode(country, `Korea, South` = "South Korea"),
location = ifelse(location_type == 'US State', state, location)
) %>%
full_join(covid_cases_mobility_stringency_fin, by = c('date', 'location', 'location_type', 'country')) %>%
mutate(location_type = recode(location_type, `country` = 'Country')) %>%
left_join(lockdown_dates_fin %>% select(location, country, lockdown_start, lockdown_end, location_type),
by = c('location', 'location_type', 'country')) %>%
mutate(
days_since_lockdown_start = as.numeric(date - lockdown_start),
lockdown_period = ifelse(is.na(lockdown_start), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
days_since_case_100 = as.numeric(date - date_case_100),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day"),
) %>%
arrange(location_key, date) %>%
select(-fips.y) %>%
rename(
fips = fips.x
)
write.csv(all_covid_data_diffs_dates, 'data/countries_states_county_covid_calcs.csv', row.names = F)
filter(all_covid_data_diffs_dates, country == 'South Korea')$StringencyIndex
filter(all_covid_data_diffs_dates, country == 'South Korea')$StringencyIndex
filter(all_covid_data_diffs_dates, country == 'South Korea') %>% select(location, country, Stringency)
filter(all_covid_data_diffs_dates, country == 'South Korea') %>% select(location, country, StringencyIndex)
filter(all_covid_data_diffs_dates, country == 'South Korea') %>% select(location, country, StringencyIndex, date)
filter(all_covid_data_diffs_dates, country == 'South Korea') %>% select(location, country, StringencyIndex, date, contains('mobility'))
filter(all_covid_data_diffs_dates, country == 'South Korea') %>% select(location, country, StringencyIndex, date, contains('mobility'), location_type)
write.csv(all_covid_data_diffs_dates, 'data/countries_states_county_covid_calcs.csv', row.names = F)
rm(list = ls())
gc()
