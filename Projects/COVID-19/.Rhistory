died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day = dplyr::group_by(covid_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19',
with_lockdown = 'No'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_late = dplyr::group_by(covid_case_simulation_lockdown_late, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Late Lockdown',
with_lockdown = 'Yes'
)
flu_cases_by_day = dplyr::group_by(flu_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'Influenza',
with_lockdown = 'No'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
covid_case_simulation_lockdown = run_case_simulation(the_r0 = 2.5, lockdown_date = 7, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
29937 / 9248
the_r0 = rweibull(n_cases_generated, r0_params$par[1], r0_params$par[2])
hist(the_r0)
run_case_simulation = function(initial_susceptible = 20e6, the_r0, lockdown_date = NULL, lockdown_effect = NULL) {
current_susceptible = initial_susceptible
case_info_list = list()
generation = 0
cases_gen_df = tibble(
parent_id = NA,
incubation_start = 0
)
n_cases_generated = 1
continue_loop = T
while (continue_loop) {
loop_start = proc.time()
# print(generation)
if (n_cases_generated > current_susceptible) {
# cat('too many cases generated!\n', n_cases_generated, '\n')
n_cases_generated = current_susceptible
suseptible_by_id = current_susceptible - 1:n_cases_generated
# cat('n_cases_generated is now', n_cases_generated, '\n')
cases_gen_df = head(cases_gen_df, n_cases_generated)
} else {
suseptible_by_id = current_susceptible - 1:n_cases_generated
}
# cat('n_cases_generated:', n_cases_generated, '\n')
# cat('current_susceptible:', current_susceptible, '\n')
#
# suseptible_by_id = suseptible_by_id[suseptible_by_id > 0]
if (current_susceptible < 0) {
# cat('no more susceptible')
break
}
the_id = initial_susceptible - suseptible_by_id
incubation_time = rweibull(n_cases_generated, weibull_params$par[1], weibull_params$par[2])
incubation_start_date = cases_gen_df$incubation_start
incubation_end_date = incubation_start_date + incubation_time
prob_running_into_someone_else = suseptible_by_id / initial_susceptible
if (is.null(the_r0)) {
the_r0 = rweibull(n_cases_generated, r0_params$par[1], r0_params$par[2])
}
if (!is.null(lockdown_date)) {
lockdown_effects = ifelse(incubation_start_date >= lockdown_date, lockdown_effect, 1)
r0_adj = the_r0 * prob_running_into_someone_else * lockdown_effects
} else {
r0_adj = the_r0 * prob_running_into_someone_else
}
cases_generated = floor(r0_adj) + rbinom(length(r0_adj), 1, r0_adj - floor(r0_adj))
n_cases_generated = sum(cases_generated)
these_cases_df = data.table(
the_id = the_id %>% as.integer(),
generation = generation,
parent_id = cases_gen_df$parent_id,
incubation_time,
incubation_start_date,
incubation_end_date,
prob_running_into_someone_else,
r0_adj,
cases_generated
) %>%
setkey(the_id)
case_info_list[[length(case_info_list) + 1]] = these_cases_df
if (n_cases_generated > 0) {
# important to sort by cases generated so the recyling works
with_gen_cases = filter(these_cases_df, cases_generated > 0) %>% arrange(-cases_generated)
cases_gen_df = data.table(
parent_id = rep(with_gen_cases$the_id, length.out = n_cases_generated),
incubation_start = runif(n_cases_generated, with_gen_cases$incubation_start_date, with_gen_cases$incubation_end_date)
) %>%
setorder(incubation_start)
stopifnot(nrow(cases_gen_df) == n_cases_generated)
}
# print(proc.time() - loop_start)
generation = generation + 1
current_susceptible = min(suseptible_by_id)
continue_loop = n_cases_generated > 0 & current_susceptible > 0
}
case_info_df = rbindlist(case_info_list) %>%
mutate(
start_day = floor(incubation_start_date),
end_day = floor(incubation_end_date)
)
return(rbindlist(case_info_list))
}
covid_case_simulation = run_case_simulation(initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation = run_case_simulation(the_r0 = NULL, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_lockdown = run_case_simulation(the_r0 = NULL, lockdown_date = 7, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_mid_lockdown = run_case_simulation(the_r0 = NULL, lockdown_date = 30, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_lockdown_late = run_case_simulation(the_r0 = NULL,  lockdown_date = 45, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
flu_case_simulation = run_case_simulation(the_r0 = 1.3) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, flu_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day = dplyr::group_by(covid_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19',
with_lockdown = 'No'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_late = dplyr::group_by(covid_case_simulation_lockdown_late, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Late Lockdown',
with_lockdown = 'Yes'
)
flu_cases_by_day = dplyr::group_by(flu_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'Influenza',
with_lockdown = 'No'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
17303/19.45e
17303/19.45e6
17303/(19.45e6*.2)
(17303/0.7)/(19.45e6*.2)
5000/17000
(12000/.7)/(8.8e6*.25)
17000 * 2
56000/.70
56000/.70/2
56000/.70/0.5
(56000/.70)
160000/38000
56000/.7
.8/.15
5*8000
5*80000
.40/.25
(56000/.70)
(56000/.70) * 2.5
library(tidyverse)
library(plotly)
library(readxl)
library(data.table)
library(htmltab)
library(incidence)
library(cowplot)
library(scales)
# start_week = 31
# end_week = 26
# goldstein uses 40-20, Rosano uses 42-17, CDC uses a very wide season
# https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.1001051
start_week = 40
end_week = 20
last_week = 53
italy_start_week = 30
# get excess italian deaths
# https://www.sciencedirect.com/science/article/pii/S1201971219303285#bib0025
italian_excess_deaths = tibble(
season = c(2013:2016),
deaths = c(7027, 20259, 15801, 24981),
population = c(345168/0.00572, 375579/.00618, 354513/0.00584, 381578/.00628)
)
setwd("~/Public_Policy/Projects/COVID-19")
# read in extracted plot data from Rosano 2019 using https://apps.automeris.io/wpd/
rosano_webplot_extracts = read_csv("literature/wpd_datasets.csv", skip = 1) %>%
mutate(
excess_deaths_date = as.Date(X, format = '%m/%d/%Y'),
baseline_date = as.Date(X_1, format = '%m/%d/%Y'),
diff_excess_deaths_date = c(NA, diff(excess_deaths_date)),
diff_baseline_date = c(NA, diff(baseline_date))
) %>%
rename(
excess_deaths_val = Y,
baseline_deaths_val = Y_1
)
# use loess smoother for full date range for both plots
full_date_range = c(rosano_webplot_extracts$excess_deaths_date,
rosano_webplot_extracts$baseline_date) %>%
range(na.rm = T)
date_df = data.frame(
the_date = seq(full_date_range[1], full_date_range[2], by = 1)
)
# plot initial data
ggplot(rosano_webplot_extracts) +
stat_smooth(aes(excess_deaths_date, excess_deaths_val), span= 0.1, se = F) +
stat_smooth(aes(baseline_date, baseline_deaths_val), span= 0.1, colour = 'black', se = F)
# fit smoothers across indvidual dates
excess_deaths_loess = loess(excess_deaths_val ~ as.numeric(excess_deaths_date), data = rosano_webplot_extracts %>% filter(), span = 0.1)
background_deaths_loess = loess(baseline_deaths_val ~ as.numeric(baseline_date), data = rosano_webplot_extracts %>% filter(), span = 0.1)
date_df$excess_deaths_smoothed = predict(excess_deaths_loess,
newdata = mutate(date_df, excess_deaths_date = the_date))
date_df$background_deaths_smoothed = predict(background_deaths_loess,
newdata = mutate(date_df, baseline_date = the_date))
date_df = mutate(date_df,
excess_deaths_smoothed = pmax(excess_deaths_smoothed, background_deaths_smoothed),
year_week_orig = format(the_date, '%Y-%U'),
the_week = format(the_date, '%U') %>% as.numeric(),
the_year = format(the_date, '%Y') %>% as.numeric(),
year_alt = ifelse(the_week == 0, the_year - 1, the_year),
week_alt = ifelse(the_week == 0, 52, the_week),
year_week = paste0(year_alt, '-', week_alt)
)
all_date_data_long = pivot_longer(date_df, cols = c('excess_deaths_smoothed', 'background_deaths_smoothed'))
## plot the smoothed data
ggplot(all_date_data_long, aes(the_date, value, colour = name)) +
geom_line()
## compute weekly statistics
weekly_vals = group_by(all_date_data_long, year_week, name) %>%
summarize(
start_date = min(the_date),
value = head(value, 1)
)
# compute excess over baseline
wide_vals = pivot_wider(weekly_vals, id_cols = c('year_week', 'start_date'),
values_from = 'value', names_from = 'name') %>%
mutate(
excess_deaths_over_baseline = excess_deaths_smoothed - background_deaths_smoothed,
year = year(start_date),
week = format(start_date, '%U') %>% as.numeric(),
season = ifelse(week>= italy_start_week, year, ifelse(week <= end_week, year-1, NA))
) %>%
left_join(italian_excess_deaths %>% select(season, population)) %>%
mutate(
count_excess_deaths_over_baseline = excess_deaths_over_baseline * ( population/1e5)
)
# total by season
totals_by_season = group_by(wide_vals, season) %>%
summarize(
sum_count_excess_deaths_over_baseline = sum(count_excess_deaths_over_baseline, na.rm = T),
mean_weekly_excess_deaths_over_baseline = mean(excess_deaths_over_baseline, na.rm = T),
obs = n()
) %>%
left_join(italian_excess_deaths %>% select(-population)) %>%
mutate(
ratio = sum_count_excess_deaths_over_baseline / deaths
)
# the rendering may have been off due to low pixellation in original graph, adjust to the ratio by season
wide_vals_with_ratios = left_join(
wide_vals, totals_by_season, by = 'season'
) %>%
mutate(
count_excess_deaths_over_baseline_adj = count_excess_deaths_over_baseline / ratio
)
season_starts = group_by(wide_vals_with_ratios, season) %>%
summarize(
season_start = min(start_date[count_excess_deaths_over_baseline_adj > 0])
)
# final dataset -- get weeks since first death
italy_flu_season_deaths_fin = left_join(wide_vals_with_ratios, season_starts, by = 'season') %>%
mutate(
weeks_since_first_death = as.numeric(start_date - season_start) %/% 7,
excess_deaths_per_100k = (count_excess_deaths_over_baseline_adj / population) * 1e5
) %>%
rename(
excess_deaths = count_excess_deaths_over_baseline_adj
) %>%
select(
start_date, weeks_since_first_death, year_week, season, excess_deaths, excess_deaths_per_100k
)
# get 2015_season
italy_season_2015 = filter(italy_flu_season_deaths_fin, season == 2015)
# plot results -- looks right!
ggplot(italy_season_2015, aes(start_date, excess_deaths)) +
geom_bar(stat = 'identity')
ggplot(italy_season_2015, aes(weeks_since_first_death, excess_deaths)) +
geom_bar(stat = 'identity')
# as.Date('2013-04-28') %>% format('%U')
# as.Date('2017-04-23') %>% format('%U')
##### get US flu burden data, compute flu season shapes #####
historical_us_flu_burden = htmltab('https://www.cdc.gov/flu/about/burden/past-seasons.html') %>%
rename(death_estimate = `Deaths >> Estimate`) %>%
filter(death_estimate != 'Estimate') %>%
mutate(
death_estimate = death_estimate %>% str_remove(',') %>% as.numeric(),
season = str_extract(Season, '[0-9]{4}') %>% as.numeric()
)
# read in latest john's hopkins covid case / death data
jh_joined_it_us = read_csv('data/jh_joined.csv') %>%
filter(
country_region %in% c('Italy', 'US')
) %>%
data.table()
jh_joined_it_us_stats = jh_joined_it_us[, {
new_deaths = deaths - lag(deaths, 1)
new_deaths = ifelse(is.na(new_deaths), 0, new_deaths)
first_death_date = min(date_upd[new_deaths > 0])
days_since_first_death = as.numeric(date_upd - first_death_date)
weeks_since_first_death = days_since_first_death %/% 7
list(
date_upd = date_upd,
days_since_first_death = days_since_first_death,
first_death_date = first_death_date,
weeks_since_first_death = weeks_since_first_death,
new_deaths = new_deaths
)
}, by = list(country_region)]
# get weekly deaths for the U.S. and Italy
weekly_deaths = group_by(jh_joined_it_us_stats, country_region, weeks_since_first_death) %>%
summarize(
total_deaths = sum(new_deaths),
obs = n()
)
us_weekly_deaths = filter(weekly_deaths, country_region == 'US', weeks_since_first_death >= 0) %>%
mutate(
Virus = 'COVID-19',
projected_deaths = total_deaths / (obs/7),
projected_minus_actual = projected_deaths - total_deaths
)
italy_weekly_deaths = filter(weekly_deaths, country_region == 'Italy', weeks_since_first_death >= 0) %>%
mutate(
Virus = 'COVID-19',
projected_deaths = total_deaths / (obs/7),
projected_minus_actual = projected_deaths - total_deaths
)
first_death_dates = filter(jh_joined_it_us_stats, days_since_first_death == 0)
#### compute flu seasons using U.S. season data
#### read in excess flu / pneumonia deaths ####
# us_NCHSData12 = read_excel('literature/Italy Influenza vs. COVID.xlsx', 'NCHSData12')
us_NCHSData12 = read_csv('https://www.cdc.gov/flu/weekly/weeklyarchives2019-2020/data/NCHSData12.csv')
names(us_NCHSData12) = str_replace_all(names(us_NCHSData12), '[ ]', '_') %>% str_to_lower()
us_NCHSData12 = arrange(us_NCHSData12, year, week) %>%
mutate(
order = 1:length(year),
season = ifelse(week>= start_week, year, ifelse(week <= end_week, year-1, NA)),
week_of_season = ifelse(week>= start_week, week-start_week + 1, (last_week - start_week) + week + 1),
pn_in_deaths = pneumonia_deaths + influenza_deaths
) %>%
data.table()
library(tidyverse)
sessionInfo()
install.packages(c('tidyverse', 'plotly', 'readxl', 'data.table', 'htmltab', 'incidence', 'cowplot', 'scales'))
