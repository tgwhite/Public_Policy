library(plotly)
library(USAboundaries)
us_cities_shp = us_cities()
remove.packages(pkgs, lib)
?remove.packages
.libPaths()
# https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html
# https://covidtracking.com/api/
# https://covid.ourworldindata.org
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(data.table)
library(countrycode)
library(viridis)
library(gganimate)
library(gifski)
library(tidyverse)
library(lmtest)
library(WDI)
library(plotly)
library(USAboundaries)
library(sf)
library(fuzzyjoin)
library(tigris)
library(scales)
library(ggthemes)
library(usmap)
library(cowplot)
setwd("~/Public_Policy/Projects/COVID-19")
us_states_shp = us_states()
us_map = USAboundaries::us_boundaries()
us_states_tigris = tigris::states()
state_geo_center = us_states_tigris@data %>%
mutate(
lat = as.numeric(INTPTLAT),
long = as.numeric(INTPTLON)
) %>%
rename(
state_abbr = STUSPS
)
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1)
)
us_states_covid_data = read_csv('http://covidtracking.com/api/states/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location_type = 'US State',
data_source = 'covidtracking.com'
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total,
location = state
) %>%
mutate(
location_key = paste(location, location_type, data_source, sep = '|'),
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1)
)
all_covid_data_stacked = bind_rows(us_covid_data, us_states_covid_data) %>%
arrange(location_key, date) %>%
pivot_longer(cols = c('new_cases', 'new_deaths', 'total_cases', 'total_deaths'),
names_to = c('measure'), values_to = 'value') %>%
data.table()
table(all_covid_data_stacked$location)
# compute first differences, pct changes, etc.
all_covid_data_diffs =
all_covid_data_stacked[, {
lag_value = lag(value, 1)
diff_value = value - lag_value
pct_change_value = diff_value / lag_value
lag_4_value = lag(value, 4)
lag_5_value = lag(value, 5)
lag_6_value = lag(value, 6)
list(
date = date,
value = value,
lag_value = lag_value,
diff_value = diff_value,
pct_change_value = pct_change_value,
lag_4_value = lag_4_value,
lag_5_value = lag_5_value,
lag_6_value = lag_6_value,
first_value = date[date == min(date)],
last_value = date[date == max(date)],
value_past_100 = min(date[value >= 100])
)
}, by = list(location_key, location, location_type, data_source, measure)] %>%
pivot_wider(
id_cols = c('location_key', 'location', 'location_type','data_source', 'date'),
names_from = 'measure',
values_from = c('value', 'lag_value', 'diff_value',
'pct_change_value', 'lag_4_value', 'lag_5_value',
'lag_6_value')
)
case_100_dates = group_by(all_covid_data_diffs, location_key) %>%
summarize(
date_case_100 = min(date[value_total_cases >= 100])
)
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
filter(date >= date_case_100) %>%
mutate(
days_since_case_100 = as.numeric(date - date_case_100)
) %>%
arrange(location_key, date)
head(us_covid_data)
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1)
)
head(us_covid_data)
us_covid_data$date
ggplot(us_covid_data, aes(date, total_cases)) +
geom_line()
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1)
)
ggplot(us_covid_data, aes(date, total_cases)) +
geom_line()
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1),
t = as.numeric(date - min(date))
)
ggplot(us_covid_data, aes(t, total_cases)) +
geom_line()
?nls
head(DNase1)
require(graphics)
DNase1 <- subset(DNase, Run == 1)
fm2DNase1 <- nls(density ~ 1/(1 + exp((xmid - log(conc))/scal)),
data = DNase1,
start = list(xmid = 0, scal = 1),
algorithm = "plinear")
summary(fm2DNase1)
head(DNase1)
summary(fm2DNase1)
a = nls(total_cases ~ initial_vals*r0^(t/5), data = us_covid_data,
start = list(initial_vals = 1, r0 = 2.5)
)
summary(a)
us_covid_data$predicted = predict(a)
ggplot(us_covid_data) +
geom_line(aes(t, predicted), colour = 'red') +
geom_line(aes(t, total_cases))
ggplot(us_covid_data) +
geom_line(aes(t, log(predicted)), colour = 'red') +
geom_line(aes(t, log(total_cases)))
simple_exponential_model = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 1, r0 = 2)
)
us_covid_data$predicted = predict(simple_exponential_model)
simple_exponential_model = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 1, r0 = 2)
)
us_covid_data$predicted = predict(simple_exponential_model)
a = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
simple_exponential_model = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
summary(simple_exponential_model)
ggplot(us_covid_data) +
geom_line(aes(t, predicted), colour = 'red') +
geom_line(aes(t, total_cases))
simple_exponential_model = nls(total_cases ~ r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
summary(simple_exponential_model)
simple_exponential_model = nls(total_cases ~ r0^(t/5), data = us_covid_data,
start = list( r0 = 2)
)
summary(simple_exponential_model)
simple_exponential_model = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
summary(simple_exponential_model)
us_covid_data$predicted = predict(simple_exponential_model)
ggplot(us_covid_data) +
geom_line(aes(t, predicted), colour = 'red') +
geom_line(aes(t, total_cases))
head(us_covid_data)
ggplot(us_covid_data, aes(date, total_deaths/total_cases)) +
geom_line()
ggplot(us_covid_data, aes(date, total_deaths/0.06)) +
geom_line()
ggplot(us_covid_data, aes(date, total_deaths/0.006)) +
geom_line()
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1),
t = as.numeric(date - min(date)),
potential_real_cases = total_deaths/0.006
)
simple_exponential_model = nls(potential_real_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
summary(simple_exponential_model)
install.packages('R0')
library(R0)
data(Germany.1918)
mGT<-generation.time("gamma", c(3, 1.5))
Germany.1918 %>% head()
Germany.1918 %>% length()
Germany.1918 %>% class()
mGT
hist(mGT)
names(mGT)
hist(mGT$time)
plot(mGT$time)
plot(1:length(mGT$time), mGT$time)
mGT$time
plot(1:length(mGT$time), mGT$GT)
library(R0)
mGT<-generation.time("gamma", c(5, 1))
plot(mGT$time, mGT$GT)
mGT<-generation.time("gamma", c(5, 1.25))
plot(mGT$time, mGT$GT)
mGT<-generation.time("gamma", c(5, 1.5))
plot(mGT$time, mGT$GT)
est.R0.EG(Germany.1918, mGT, begin=1, end=27)
length(Germany.1918)
?est.R0.EG
plot(1:27, Germany.1918[1:27])
Germany.1918[1:27]
length(mGT)
mGT
head(us_covid_data)
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1),
t = as.numeric(date - min(date)),
potential_real_cases = total_deaths/0.006,
lag_cases = lag(total_cases, 1),
new_cases = total_cases - lag_cases
)
plot(1:length(us_covid_data$new_cases), us_covid_data$new_cases)
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
arrange(date) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
new_cases = total_cases - lag(total_cases, 1),
new_deaths = total_deaths - lag(total_deaths, 1),
t = as.numeric(date - min(date)),
potential_real_cases = total_deaths/0.006
)
plot(1:length(us_covid_data$new_cases), us_covid_data$new_cases)
est.R0.EG(us_covid_data$new_cases, mGT, begin=1, end=27)
length(us_covid_data$new_cases)
est.R0.EG(us_covid_data$new_cases, mGT, begin=1, end=22)
simple_exponential_model = nls(total_cases ~ initial_cases*r0^(t/5), data = us_covid_data,
start = list(initial_cases = 10, r0 = 2)
)
summary(simple_exponential_model)
est.R0.EG(us_covid_data$new_cases, mGT, begin=0, end=22)
est.R0.EG(us_covid_data$new_cases, mGT, begin=1, end=22)
summary(simple_exponential_model)
?est.R0.EG
est.R0.EG(us_covid_data$new_cases, mGT, begin=1, end=22, reg.met = 'linear')
library(tidyverse)
rm(list = ls())
library(tidyverse)
library(R0)
johns_hopkins_cases = read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv') %>%
pivot_longer(cols = matches('^([0-9])'), names_to = 'date', values_to = 'cases')
names(johns_hopkins_cases) = names(johns_hopkins_cases) %>% tolower() %>% str_replace('[\\/]', '_')
head(johns_hopkins_cases)
##### pull in data ####
johns_hopkins_cases = read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv') %>%
pivot_longer(cols = matches('^([0-9])'), names_to = 'date', values_to = 'cases')
johns_hopkins_deaths = read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv') %>%
pivot_longer(cols = matches('^([0-9])'), names_to = 'date', values_to = 'deaths')
jh_joined = left_join(johns_hopkins_cases, johns_hopkins_deaths) %>%
mutate(
date_upd = as.Date(date, format = '%m/%d/%y')
)
names(jh_joined) = names(jh_joined) %>% tolower() %>% str_replace('[\\/]', '_')
jh_joined = mutate(jh_joined,
is_country = is.na(province_state),
US_state = country_region == 'US' & province_state %in% us_states_shp$name,
US_county = country_region == 'US' & province_state %in% us_counties_shp$province_state_city,
US_city = country_region == 'US' & !US_state & !US_county & province_state %in% us_cities_shp$province_state_city,
other_county = country_region == 'US' & !US_state & !US_county & !US_city & province_state %in% us_counties_shp$county_state,
other_county_name = ifelse(other_county, str_replace(province_state, ',', '%s,'), province_state) %>%
sprintf(' County'),
US_county = US_county | other_county,
province_state_fin = ifelse(other_county & str_detect(province_state, ', LA'), str_replace(other_county_name, ' County', ' Parish'), other_county_name),
US_other_geo_entity = country_region == 'US' & US_state+US_county+US_city==0,
location_key = paste(province_state, country_region, sep = '|')
)
names(johns_hopkins_cases) = names(johns_hopkins_cases) %>% tolower() %>% str_replace('[\\/]', '_')
us_jh_cases = filter(johns_hopkins_cases, country_region == 'US') %>%
mutate(date = as.Date(date, format = '%m/%d/%y')) %>%
arrange(-date) %>%
mutate(
lag_cases = lag(cases, 1),
new_cases = cases - lag_cases
)
us_jh_cases = filter(johns_hopkins_cases, country_region == 'US') %>%
mutate(date = as.Date(date, format = '%m/%d/%y'))
us_jh_cases
us_jh_cases = filter(johns_hopkins_cases, country_region == 'US') %>%
mutate(date = as.Date(date, format = '%m/%d/%y')) %>%
arrange(date) %>%
mutate(
lag_cases = lag(cases, 1),
new_cases = cases - lag_cases
)
head(us_jh_cases)
us_jh_cases = filter(johns_hopkins_cases, country_region == 'US') %>%
mutate(date = as.Date(date, format = '%m/%d/%y')) %>%
arrange(date) %>%
mutate(
lag_cases = lag(cases, 1),
new_cases = cases - lag_cases,
new_cases = ifelse(is.na(new_cases), 1, new_cases)
)
head(us_jh_cases)
us_jh_cases = filter(johns_hopkins_cases, country_region == 'US') %>%
mutate(date = as.Date(date, format = '%m/%d/%y')) %>%
arrange(date) %>%
mutate(
lag_cases = lag(cases, 1),
new_cases = cases - lag_cases,
new_cases = ifelse(is.na(new_cases), 1, new_cases),
t = as.numeric(date - min(date))
)
simple_exponential_model = nls(cases ~ initial_cases*r0^(t/5), data = us_jh_cases,
start = list(initial_cases = 10, r0 = 2))
0
simple_exponential_model = nls(cases ~ initial_cases*r0^(t/5), data = us_jh_cases,
start = list(initial_cases = 1, r0 = 2))
summary(simple_exponential_model)
us_jh_cases$cases
est.R0.EG(us_jh_cases$new_cases, mGT, begin=1, end=length(us_jh_cases$new_cases))
mGT<-generation.time("gamma", c(5, 1.5))
est.R0.EG(us_jh_cases$new_cases, mGT, begin=1, end=length(us_jh_cases$new_cases))
length(us_jh_cases$new_cases)
est.R0.EG(us_jh_cases$new_cases, mGT, begin=1, end=64)
summary(simple_exponential_model)
simple_exponential_model = nls(cases ~ initial_cases + r0^(t/5), data = us_jh_cases,
start = list(initial_cases = 1, r0 = 2))
summary(simple_exponential_model)
simple_exponential_model = nls(cases ~  r0^(t/5), data = us_jh_cases,
start = list(initial_cases = 1, r0 = 2))
summary(simple_exponential_model)
simple_exponential_model = nls(cases ~  r0^(t/5), data = us_jh_cases,
start = list( r0 = 2))
summary(simple_exponential_model)
simple_exponential_model = nls(cases ~  r0^(t/5), data = us_jh_cases,
start = list( r0 = 2))
summary(simple_exponential_model)
?est.R0.EG
length(us_jh_cases$new_cases)
estR0<-estimate.R(us_jh_cases$new_cases, mGT, begin=1, end=64, methods=c("EG", "SB"), nsim=100)
estR0
estR0<-estimate.R(us_jh_cases$new_cases, mGT, begin=1, end=64, pop.size = 327e6, methods=c("EG", "SB"), nsim=1000)
estR0
simple_exponential_model = nls(cases ~  case_sequences * r0^(t/5), data = us_jh_cases,
start = list(case_sequences = 1, r0 = 2))
summary(simple_exponential_model)
simple_exponential_model = nls(cases ~  case_networks * r0^(t/5), data = us_jh_cases,
start = list(case_networks = 1, r0 = 2))
summary(simple_exponential_model)
mGT$GT
est.R0.EG(us_jh_cases$new_cases, mGT, begin=1, end=64)
est.R0.EG(us_jh_cases$new_cases, mGT, begin=1, end=as.integer(length(us_jh_cases$new_cases)))
est.R0.EG(us_jh_cases$new_cases, mGT, begin=as.integer(1), end=as.integer(length(us_jh_cases$new_cases)))
us_jh_cases$simple_exp_prediction = predict(simple_exponential_model)
ggplot(us_jh_cases, aes(t)) +
geom_line(aes(y = simple_exp_prediction), colour = 'red', linetype = 'dashed') +
geom_line(aes(y = cases), colour = 'black')
us_jh_cases_long = pivot_longer(us_jh_cases, cols = c('simple_exp_prediction', 'cases'))
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line()
# fit a simple exponnetial model using non-linear least squares
simple_exponential_model = nls(cases ~  case_networks * r0^(t/5), data = us_jh_cases,
start = list(case_networks = 1, r0 = 2.5))
summary(simple_exponential_model)
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line()
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('Confirmed Cases' = 'cases', 'Modeled Cases' = 'simple_exp_prediction'))
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'Modeled Cases' = 'simple_exp_prediction'))
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'simple_exp_prediction' = 'Modeled Cases'))
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'simple_exp_prediction' = 'Modeled Cases')) +
scale_y_continuous(labels = comma)
ggplot(us_jh_cases_long, aes(t, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'simple_exp_prediction' = 'Modeled Cases')) +
scale_y_continuous(labels = comma) +
labs(x = 'T', y = 'Cases')
ggplot(us_jh_cases_long, aes(date, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'simple_exp_prediction' = 'Modeled Cases')) +
scale_y_continuous(labels = comma) +
labs(x = 'Date', y = 'Cases')
ggplot(us_jh_cases_long, aes(date, value, colour = name)) +
geom_line() +
scale_colour_hue(name = 'Estimate', labels = c('cases' = 'Confirmed Cases', 'simple_exp_prediction' = 'Modeled Cases')) +
scale_y_continuous(labels = comma) +
labs(x = 'Date', y = 'Cases', title = 'Exponential Growth Model vs. Confirmed Cases')
ggsave('exp_growth_vs_cases.png', height = 6, width = 6, units = 'in', dpi = 600)
getwd()
plot(mGT$time, mGT$GT)
lines(mGT$time, mGT$GT)
# this is the generation time or incubation period
# https://annals.org/aim/fullarticle/2762808/incubation-period-coronavirus-disease-2019-covid-19-from-publicly-reported
?generation.time
plot(mGT$time, mGT$GT)
lines(mGT$time, mGT$GT)
