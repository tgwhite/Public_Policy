days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
) %>%
arrange(location_key, date)
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
ggplot(lockdown_r0_stats, aes(lockdown_period, mean_five_day_effective_r0, fill = lockdown_period))+
geom_bar(stat = 'identity')
a = lm(effective_r0_interpolated ~ lockdown_period, data = all_covid_data_diffs_dates)
summary(a)
lockdown_r0_stats
all_covid_data_diffs_dates$time
simple_lockdown_model = lm(effective_r0_interpolated ~ lockdown_period + days_since_case_20, data = all_covid_data_diffs_dates)
all_covid_data_diffs_dates$days_since_case_20
simple_lockdown_model = lm(effective_r0_interpolated ~ lockdown_period + days_since_case_20, data = all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
summary(simple_lockdown_model)
simple_lockdown_model = lm(effective_r0_interpolated ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
summary(simple_lockdown_model)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - Start_date),
lockdown_period = ifelse(is.na(Start_date), 'Pre-Lockdown', 'Post-Lockdown') %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
) %>%
arrange(location_key, date)
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
ggplot(lockdown_r0_stats, aes(lockdown_period, mean_five_day_effective_r0, fill = lockdown_period))+
geom_bar(stat = 'identity')
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - Start_date),
lockdown_period = ifelse(is.na(Start_date), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
) %>%
arrange(location_key, date)
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
ggplot(lockdown_r0_stats, aes(lockdown_period, mean_five_day_effective_r0, fill = lockdown_period))+
geom_bar(stat = 'identity')
simple_lockdown_model = lm(effective_r0_interpolated ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
summary(simple_lockdown_model)
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = seq(0, 30, by = 5)
)
pred_dat$preds = predict(simple_lockdown_model, newdata = pred_dat)
pred_dat
ggplot(pred_dat, aes(days_since_case_20, preds, colour = lockdown_period)) +
geom_line() +
geom_point()
summary(simple_lockdown_model)
simple_lockdown_model = lm(log(effective_r0_interpolated) ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
# days_since_case_20 = seq(0, 30, by = 5)
)
pred_dat$preds = predict(simple_lockdown_model, newdata = pred_dat)
pred_dat
1.969130 / 2.593881
plot(simple_lockdown_model)
all_covid_data_diffs_dates$effective_r0_interpolated
all_covid_data_diffs_dates$effective_r0_interpolated %>% log()
simple_lockdown_model = lm(log(effective_r0_interpolated) ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
simple_lockdown_model = lm(log(effective_r0_interpolated) ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0, !is.na(effective_r0_interpolated)))
simple_lockdown_model = lm(log(effective_r0_interpolated+1) ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0, !is.na(effective_r0_interpolated)))
summary(simple_lockdown_model)
plot(simple_lockdown_model)
summary(simple_lockdown_model)
simple_lockdown_model = lm(effective_r0_interpolated ~ lockdown_period*days_since_case_20, data = all_covid_data_diffs_dates %>%
filter(days_since_case_20 >= 0 ))
summary(simple_lockdown_model)
all_covid_data_diffs_dt = data.table(all_covid_data_diffs)
effective_r0_dat = all_covid_data_diffs_dt[, {
five_day_effective_r0 = cum_diff_value_total_cases / cum_lag_5_diff_value_total_cases
effective_r0_nas = ifelse(is.infinite(five_day_effective_r0) | five_day_effective_r0 == 0, NA, five_day_effective_r0)
effective_r0_nas = as.numeric(effective_r0_nas)
effective_r0_interpolated = zoo(effective_r0_nas, 1:length(effective_r0_nas)) %>% na.approx(na.rm = F) %>% as.numeric()
# there are data integrity issues. Limit max r0 to 30 and min to 0
effective_r0_interpolated = pmin(effective_r0_interpolated, 30)
effective_r0_interpolated = pmax(effective_r0_interpolated, 0)
rolling_mean_five_day_effective_r0 = c(rep(NA, 4), roll_mean(effective_r0_interpolated, 5))
list(
date = date,
vall = value_total_cases,
val = cum_diff_value_total_cases,
lag_val = cum_lag_5_diff_value_total_cases,
five_day_effective_r0 = five_day_effective_r0,
effective_r0_nas = effective_r0_nas,
effective_r0_interpolated = effective_r0_interpolated,
rolling_mean_five_day_effective_r0 = rolling_mean_five_day_effective_r0
)
}, by = list(location_key, location)]
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - Start_date),
lockdown_period = ifelse(is.na(Start_date), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results
) %>%
arrange(location_key, date)
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
ggplot(pred_dat, aes(days_since_case_20, preds, colour = lockdown_period)) +
geom_line() +
geom_point()
ggplot(all_covid_data_diffs_dates, aes(lockdown_period, effective_r0_interpolated, fill = lockdown_period))+
geom_boxplot()
ggplot(all_covid_data_diffs_dates, aes(effective_r0_interpolated, fill = lockdown_period, colour = lockdown_period)) +
stat_density(aes(colour = lockdown_period), position = 'identity', alpha = 0.3, fill = NA) +
# geom_histogram(alpha = 0.2) +
scale_x_continuous(limits = c(-1, 30)) +
geom_vline(data = lockdown_r0_stats, aes(xintercept = mean_five_day_effective_r0, colour = lockdown_period), size = 1)
latest_state_data =
all_covid_data_diffs_dates %>%
filter(location != 'United States') %>%
group_by(location_key, location, location_name) %>%
summarize(
last_cases = tail(value_total_cases, 1),
last_cases_100k = tail(cases_per_100k, 1),
last_deaths_100k = tail(deaths_per_100k, 1),
new_cases = tail(cum_diff_value_total_cases, 1),
last_date = max(date)
) %>%
arrange(-last_cases) %>%
ungroup()
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
a = lm(effective_r0_interpolated ~ log(days_since_case_20) * lockdown_period, data =  all_covid_data_diffs_dates)
a = lm(effective_r0_interpolated ~ log(days_since_case_20 + 1) * lockdown_period, data =  all_covid_data_diffs_dates)
a = lm(effective_r0_interpolated ~ log(days_since_case_20 + 1) * lockdown_period, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
summary(a)
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
predict(a, newdata = pred_dat)
pred_dat$pred  = predict(a, newdata = pred_dat)
pred_dat
plot(a)
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
plot(a)
a = lm(log(effective_r0_interpolated+1) ~ log(days_since_case_20 + 1) * lockdown_period, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
plot(a)
summary(a)
a = lm(log(effective_r0_interpolated+1) ~ log(days_since_case_20 + 1) * lockdown_period + location, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
summary(a)
a = lm(log(effective_r0_interpolated+1) ~ log(days_since_case_20 + 1) * lockdown_period * location, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
plot(a)
summary(a)
a = lm(log(effective_r0_interpolated+1) ~ log(days_since_case_20 + 1) * lockdown_period, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
plot(a)
pred_dat$pred  = predict(a, newdata = pred_dat)
pred_dat
pred_dat$pred  = predict(a, newdata = pred_dat) %>% exp()
summary(a)
pred_dat
a = lm(log(effective_r0_interpolated+1) ~ log(days_since_case_20 + 1) * lockdown_period, data =  all_covid_data_diffs_dates %>% filter(days_since_case_20 >= 0))
pred_dat = expand.grid(
lockdown_period = unique(all_covid_data_diffs_dates$lockdown_period),
days_since_case_20 = 20
)
pred_dat$pred  = predict(a, newdata = pred_dat) %>% exp()
pred_dat
2.754859 / 3.987907
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date, pct_change_value_total_cases)) +
geom_line()
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date, pct_change_value_total_cases)) +
geom_line() +
geom_point(aes(y = effective_r0_interpolated))
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date, pct_change_value_total_cases)) +
geom_line() +
geom_point(aes(y = effective_r0_interpolated/max(effective_r0_interpolated)))
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date, pct_change_value_total_cases)) +
geom_line() +
geom_point(aes(y = effective_r0_interpolated/max(effective_r0_interpolated, na.rm = T)))
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date)) +
geom_line(aes(y = pct_change_value_total_cases / max(pct_change_value_total_cases, na.rm = T))) +
geom_point(aes(y = effective_r0_interpolated/max(effective_r0_interpolated, na.rm = T)))
filter(all_covid_data_diffs_dates, location == 'CA') %>%
ggplot(aes(date)) +
geom_line(aes(y = pct_change_value_total_cases / max(pct_change_value_total_cases, na.rm = T))) +
geom_point(aes(y = effective_r0_interpolated/max(effective_r0_interpolated, na.rm = T)))
6300 *100000
6300 * (19e6/100000 )
19e6/100000
filter(all_covid_data_diffs_dates, location == 'NY', date == max(date)) %>% select(value_total_cases)
122031 / 0.1
122031 / (0.2 * .2)
filter(all_covid_data_diffs_dates, location == 'NY', date == max(date)) %>% select(value_total_cases, population)
122031 / (0.2 * .2) / (19454000)
filter(all_covid_data_diffs_dates, location == 'NY') %>%
ggplot(aes(date)) +
geom_line(aes(y = pct_change_value_total_cases / max(pct_change_value_total_cases, na.rm = T))) +
geom_point(aes(y = effective_r0_interpolated/max(effective_r0_interpolated, na.rm = T)))
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = '', y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown are Effective: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, with decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = '', y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown are Effective: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, with decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
# final, clean dataset with all sorts of calculations complete #
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
left_join(effective_r0_dat) %>%
left_join(us_lockdown_dates) %>%
mutate(
days_since_lockdown_start = as.numeric(date - Start_date),
lockdown_period = ifelse(is.na(Start_date), 'No Lockdown', ifelse(days_since_lockdown_start < 0, 'Pre-Lockdown', 'Post-Lockdown')) %>%
factor() %>% relevel(ref = 'Pre-Lockdown'),
days_since_case_20 = as.numeric(date - date_case_20),
new_tests_per_100k = cum_diff_value_total_tests / pop_100k,
tests_per_100k = value_total_tests / pop_100k,
cases_per_100k = value_total_cases / pop_100k,
new_cases_per_100k = cum_diff_value_total_cases / pop_100k,
deaths_per_100k = value_total_deaths / pop_100k,
diff_value_avg_3_total_tests_per_100k = diff_value_avg_3_total_tests / pop_100k,
percent_positive_new_tests = cum_diff_value_total_cases / cum_diff_value_tests_with_results,
week_day = lubridate::wday(date),
weekend_ind = ifelse(week_day %in% c(7, 1), 'Weekend', "Week Day")
) %>%
arrange(location_key, date)
latest_state_data =
all_covid_data_diffs_dates %>%
filter(location != 'United States') %>%
group_by(location_key, location, location_name) %>%
summarize(
last_cases = tail(value_total_cases, 1),
last_cases_100k = tail(cases_per_100k, 1),
last_deaths_100k = tail(deaths_per_100k, 1),
new_cases = tail(cum_diff_value_total_cases, 1),
last_date = max(date)
) %>%
arrange(-last_cases) %>%
ungroup()
# how effective are lockdowns?
lockdown_r0_stats = group_by(all_covid_data_diffs_dates, lockdown_period) %>%
summarize(
mean_five_day_effective_r0 = mean(effective_r0_interpolated, na.rm = T)
)
ggplot(all_covid_data_diffs_dates, aes(lockdown_period, effective_r0_interpolated, fill = lockdown_period))+
geom_boxplot()
# selected_locations =  c('NY', 'CA', 'WA', 'LA', 'MI', 'FL', 'AL', 'TX', 'IL', 'CO', 'NJ', 'GA')
latest_state_data_sub = head(latest_state_data, 12)
selected_locations = latest_state_data_sub$location
location_levels = filter(latest_state_data_sub, location %in% selected_locations) %>% pull(location_name)
location_sub = filter(all_covid_data_diffs_dates, location %in% selected_locations) %>%
mutate(
location_name = factor(location_name, levels = location_levels)
)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = '', y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown are Effective: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, with decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = '', y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown Effects: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, with decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = NULL, y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown Effects: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, with decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
main_plot =
filter(location_sub, days_since_case_20 >= 5) %>%
ggplot() +
geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = 1), colour = 'red') +
geom_hline(aes(yintercept = 2.28), linetype = 'dashed') +
geom_vline(data = us_lockdown_dates %>% filter(location_name %in% unique(location_sub$location_name)), aes(xintercept = Start_date)) +
geom_point(aes(date, effective_r0_interpolated, colour = weekend_ind)) +
stat_smooth(aes(date, effective_r0_interpolated), se = F, method = 'gam') +
scale_colour_manual(name = '', values = c('Week Day' = 'steelblue', 'Weekend' = 'orange')) +
theme_bw() +
theme(
title = element_text(size = 14),
axis.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 0, face = 'italic'),
plot.subtitle = element_text(size = 11, face = 'italic'),
axis.text.x = element_text(angle = 45),
plot.margin = unit(c(0.25, 0.5, 0.25, 0.25), 'in'),
legend.position = 'bottom',
strip.text = element_text(face = 'bold')
) +
labs(
x = NULL, y = 'Daily Effective COVID-19 Reproduction Number (r0)\n(New Cases / New Cases Generated 5 Days Later)\n',
title = 'Lockdown Effects: COVID-19 Daily Effective R0 by State',
subtitle = sprintf('Top 12 U.S. states by cases, through %s. Vertical lines show state lockdown dates. Dashed line shows average COVID-19 r0 and red line shows r0=1, below which is decreasing case growth.\nNote that each state has its own scale.', max(location_sub$date) %>% format('%B %d')),
caption = 'Chart: Taylor G. White\nData: covidtracking.com, auravision.ai, CNN'
)
free_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4, scales = 'free_y')
ggsave('output/effective_r0_top_12_states_free.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = free_plot)
same_scale_plot = main_plot +
facet_wrap(~factor(location_name, levels = location_levels), ncol = 4)
ggsave('output/effective_r0_top_12_states.png', height= 11, width = 14.5, units = 'in', dpi = 800, plot = same_scale_plot)
