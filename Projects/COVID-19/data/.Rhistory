# https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html
# https://covidtracking.com/api/
# https://covid.ourworldindata.org
library(plotly)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(data.table)
library(countrycode)
library(viridis)
library(gganimate)
library(gifski)
library(tidyverse)
library(lmtest)
library(WDI)
library(plotly)
library(USAboundaries)
library(sf)
library(fuzzyjoin)
library(tigris)
library(scales)
library(ggthemes)
library(usmap)
library(cowplot)
setwd("~/Public_Policy/Projects/COVID-19")
us_counties_shp = us_counties()
us_states_shp = us_states()
us_map = USAboundaries::us_boundaries()
us_states_tigris = tigris::states()
us_counties_tigris = tigris::counties()
state_geo_center = us_states_tigris@data %>%
mutate(
lat = as.numeric(INTPTLAT),
long = as.numeric(INTPTLON)
) %>%
rename(
state_abbr = STUSPS
)
us_covid_data = read_csv('https://covidtracking.com/api/us/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location = 'United States',
location_type = 'country',
data_source = 'covidtracking.com',
location_key = paste(location, location_type, data_source, sep = '|')
) %>%
arrange(date) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total
) %>%
mutate(
percent_positive_cases = total_cases / (total_cases + negative),
tests_with_results = negative + total_cases,
case_fatality_rate = total_deaths / total_cases
)
us_states_covid_data = read_csv('http://covidtracking.com/api/states/daily.csv') %>%
mutate(
date = as.Date(as.character(date), format = '%Y%m%d'),
location_type = 'US State',
data_source = 'covidtracking.com',
location_key = paste(state, location_type, data_source, sep = '|')
) %>%
arrange(location_key, date) %>%
rename(
total_cases = positive,
total_deaths = death,
total_tests = total,
location = state
) %>%
mutate(
percent_positive_cases = total_cases / (total_cases + negative),
tests_with_results = negative + total_cases,
case_fatality_rate = total_deaths / total_cases
)
all_covid_data_stacked = bind_rows(us_covid_data, us_states_covid_data) %>%
arrange(location_key, date) %>%
pivot_longer(cols = c('total_cases', 'total_deaths',
'percent_positive_cases', 'case_fatality_rate', 'tests_with_results'),
names_to = c('measure'), values_to = 'value') %>%
data.table()
# compute first differences, pct changes, etc.
all_covid_data_diffs =
all_covid_data_stacked[, {
lag_value = lag(value, 1)
diff_value = value - lag_value
pct_change_value = diff_value / lag_value
lag_4_value = lag(value, 4)
lag_5_value = lag(value, 5)
lag_6_value = lag(value, 6)
list(
time = as.integer(date - min(date)),
date = date,
value = value,
lag_value = lag_value,
diff_value = diff_value,
pct_change_value = pct_change_value,
lag_4_value = lag_4_value,
lag_5_value = lag_5_value,
lag_6_value = lag_6_value,
first_value = date[date == min(date)],
last_value = date[date == max(date)],
value_past_100 = min(date[value >= 100])
)
}, by = list(location_key, location, location_type, data_source, measure)] %>%
pivot_wider(
id_cols = c('location_key', 'location', 'location_type','data_source', 'date', 'time'),
names_from = 'measure',
values_from = c('value', 'lag_value', 'diff_value',
'pct_change_value', 'lag_4_value', 'lag_5_value',
'lag_6_value')
)
case_100_dates = group_by(all_covid_data_diffs, location_key) %>%
summarize(
date_case_20 = min(date[value_total_cases >= 20])
)
all_covid_data_diffs_dates = left_join(all_covid_data_diffs, case_100_dates) %>%
mutate(
days_since_case_20 = as.numeric(date - date_case_20),
percent_positive_new_tests = ifelse(time == 0, value_total_cases/value_tests_with_results, diff_value_total_cases / diff_value_tests_with_results)
) %>%
arrange(location_key, date)
install.packages(c("fredr", "sqldf"))
setwd("~/Public_Policy/Projects/COVID-19/data")
setwd("~/Public_Policy/Projects/COVID-19/data")
library(tidyverse)
library(fredr)
library(sqldf)
continue_download = F
clean_existing_data = F
setwd("~/Public_Policy/Projects/COVID-19/data")
fred_sqlite = dbConnect(SQLite(), dbname= "fred_sqlite.sqlite")
fredr_set_key('0437e7baffc7066bacb86efa56cc37c9')
states_category = 27281
state_categories = fredr_category_children(states_category) %>%
filter(! name %in% c('Puerto Rico', 'District of Columbia', 'Virgin Islands'))
if (continue_download) {
states_already_downloaded = dbGetQuery(fred_sqlite, 'select distinct state_name from state_economic_data')
state_categories = filter(state_categories, !name %in% states_already_downloaded$state_name)
}
if (clean_existing_data) {
dbGetQuery(fred_sqlite, 'drop table state_economic_data')
}
all_state_data_downloaded = lapply(1:nrow(state_categories), function(state_it){
state_it = 1
the_state = state_categories[state_it,]
cat('working on ', the_state$name, '...\n')
state_id = the_state$id
category_tags = fredr_category_tags(state_id)
inflation_deflators = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'implicit price deflator')
taxes = fredr_category_series(state_id, order_by = 'popularity', exclude_tag_names = 'income', tag_names = 'tax', sort_order = 'desc') %>% head(10)
vacancy_rates = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'vacancy', sort_order = 'desc')
housing_categories = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'housing', exclude_tag_names = 'vacancy', sort_order = 'desc')
population = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'population', sort_order = 'desc')
unemployment = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'unemployment;rate', sort_order = 'desc')
state_product = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'gsp', sort_order = 'desc') %>% head(10)
wages = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'wages', sort_order = 'desc') %>% head(10)
personal_income = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'personal income;per capita', sort_order = 'desc')
all_combined_categories = bind_rows(
taxes, vacancy_rates, housing_categories, population, unemployment,
state_product, wages, personal_income
) %>%
unique() %>%
filter(
seasonal_adjustment_short == 'NSA'
)
download_list = list()
for (it in 1:nrow(all_combined_categories)) {
selected_series = all_combined_categories[it,]
print(it/nrow(all_combined_categories))
download_list[[it]] = fredr_series_observations(selected_series$id, frequency = 'a', aggregation_method = 'eop') %>%
left_join(selected_series, by = c('series_id' = 'id')) %>%
mutate(
state_name = the_state$name,
state_id = the_state$id
)
Sys.sleep(0.5)
}
all_state_data_stacked = bind_rows(download_list) %>% unique()
cat('downloaded ', nrow(all_state_data_stacked), 'rows\n')
dbWriteTable(fred_sqlite, 'state_economic_data', all_state_data_stacked, append = T)
return(all_state_data_stacked)
})
dbDisconnect(fred_sqlite)
dbDisconnect(fred_sqlite)
rm(list = ls())
gc()
library(tidyverse)
library(fredr)
library(sqldf)
continue_download = F
clean_existing_data = F
setwd("~/Public_Policy/Projects/COVID-19/data")
fred_sqlite = dbConnect(SQLite(), dbname= "fred_sqlite.sqlite")
fredr_set_key('0437e7baffc7066bacb86efa56cc37c9')
states_category = 27281
state_categories = fredr_category_children(states_category) %>%
filter(! name %in% c('Puerto Rico', 'District of Columbia', 'Virgin Islands'))
if (continue_download) {
states_already_downloaded = dbGetQuery(fred_sqlite, 'select distinct state_name from state_economic_data')
state_categories = filter(state_categories, !name %in% states_already_downloaded$state_name)
}
if (clean_existing_data) {
dbGetQuery(fred_sqlite, 'drop table state_economic_data')
}
all_state_data_downloaded = lapply(1:nrow(state_categories), function(state_it){
the_state = state_categories[state_it,]
cat('working on ', the_state$name, '...\n')
state_id = the_state$id
category_tags = fredr_category_tags(state_id)
inflation_deflators = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'implicit price deflator')
taxes = fredr_category_series(state_id, order_by = 'popularity', exclude_tag_names = 'income', tag_names = 'tax', sort_order = 'desc') %>% head(10)
vacancy_rates = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'vacancy', sort_order = 'desc')
housing_categories = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'housing', exclude_tag_names = 'vacancy', sort_order = 'desc')
population = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'population', sort_order = 'desc')
unemployment = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'unemployment;rate', sort_order = 'desc')
state_product = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'gsp', sort_order = 'desc') %>% head(10)
wages = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'wages', sort_order = 'desc') %>% head(10)
personal_income = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'personal income;per capita', sort_order = 'desc')
all_combined_categories = bind_rows(
taxes, vacancy_rates, housing_categories, population, unemployment,
state_product, wages, personal_income
) %>%
unique() %>%
filter(
seasonal_adjustment_short == 'NSA'
)
download_list = list()
for (it in 1:nrow(all_combined_categories)) {
selected_series = all_combined_categories[it,]
print(it/nrow(all_combined_categories))
download_list[[it]] = fredr_series_observations(selected_series$id, frequency = 'a', aggregation_method = 'eop') %>%
left_join(selected_series, by = c('series_id' = 'id')) %>%
mutate(
state_name = the_state$name,
state_id = the_state$id
)
Sys.sleep(0.5)
}
all_state_data_stacked = bind_rows(download_list) %>% unique()
cat('downloaded ', nrow(all_state_data_stacked), 'rows\n')
dbWriteTable(fred_sqlite, 'state_economic_data', all_state_data_stacked, append = T)
return(all_state_data_stacked)
})
setwd("~/Public_Policy/Projects/COVID-19/data")
library(tidyverse)
library(fredr)
library(sqldf)
continue_download = T
clean_existing_data = F
setwd("~/Public_Policy/Projects/COVID-19/data")
fred_sqlite = dbConnect(SQLite(), dbname= "fred_sqlite.sqlite")
fredr_set_key('0437e7baffc7066bacb86efa56cc37c9')
states_category = 27281
state_categories = fredr_category_children(states_category) %>%
filter(! name %in% c('Puerto Rico', 'District of Columbia', 'Virgin Islands'))
if (continue_download) {
states_already_downloaded = dbGetQuery(fred_sqlite, 'select distinct state_name from state_economic_data')
state_categories = filter(state_categories, !name %in% states_already_downloaded$state_name)
}
if (clean_existing_data) {
dbGetQuery(fred_sqlite, 'drop table state_economic_data')
}
all_state_data_downloaded = lapply(1:nrow(state_categories), function(state_it){
the_state = state_categories[state_it,]
cat('working on ', the_state$name, '...\n')
state_id = the_state$id
category_tags = fredr_category_tags(state_id)
inflation_deflators = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'implicit price deflator')
taxes = fredr_category_series(state_id, order_by = 'popularity', exclude_tag_names = 'income', tag_names = 'tax', sort_order = 'desc') %>% head(10)
vacancy_rates = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'vacancy', sort_order = 'desc')
housing_categories = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'housing', exclude_tag_names = 'vacancy', sort_order = 'desc')
population = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'population', sort_order = 'desc')
unemployment = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'unemployment;rate', sort_order = 'desc')
state_product = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'gsp', sort_order = 'desc') %>% head(10)
wages = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'wages', sort_order = 'desc') %>% head(10)
personal_income = fredr_category_series(state_id, order_by = 'popularity', tag_names = 'personal income;per capita', sort_order = 'desc')
all_combined_categories = bind_rows(
taxes, vacancy_rates, housing_categories, population, unemployment,
state_product, wages, personal_income
) %>%
unique() %>%
filter(
seasonal_adjustment_short == 'NSA'
)
download_list = list()
for (it in 1:nrow(all_combined_categories)) {
selected_series = all_combined_categories[it,]
print(it/nrow(all_combined_categories))
download_list[[it]] = fredr_series_observations(selected_series$id, frequency = 'a', aggregation_method = 'eop') %>%
left_join(selected_series, by = c('series_id' = 'id')) %>%
mutate(
state_name = the_state$name,
state_id = the_state$id
)
Sys.sleep(0.5)
}
all_state_data_stacked = bind_rows(download_list) %>% unique()
cat('downloaded ', nrow(all_state_data_stacked), 'rows\n')
dbWriteTable(fred_sqlite, 'state_economic_data', all_state_data_stacked, append = T)
return(all_state_data_stacked)
})
rm(list = ls())
gc()
# to do -- use sqlite as storage to work around download/rate limit issues
library(tidyverse)
library(fredr)
library(sqldf)
continue_download = T
clean_existing_data = F
setwd("~/Public_Policy/Projects/COVID-19/data")
fred_sqlite = dbConnect(SQLite(), dbname= "fred_sqlite.sqlite")
fredr_set_key('0437e7baffc7066bacb86efa56cc37c9')
states_category = 27281
desired_title_substrings = c("Per Capita Personal Income","Real Per Capita Personal Income",
"All-Transactions House Price Index",
"All Employees: Total Nonfarm",
"Average Weekly Wages for Employees in Private Establishments",
"Total Gross Domestic Product", "Total Per Capita Real Gross Domestic Product")
state_categories = fredr_category_children(states_category)
all_counties_MSAs = lapply(state_categories$id, function(state_id){
state_children = fredr_category_children(state_id)
msa_counties = filter(state_children, name %in% c('Counties', 'MSAs', 'Parishes'))
}) %>%
bind_rows() %>%
left_join(
state_categories %>% select(-parent_id) %>% rename(state = name),
by = c('parent_id' = 'id')
) %>%
rename(
state_id = parent_id
)
## all county level data for the US
county_substrings = c(
'Resident Population',
'Mean Commuting Time',
'Unemployment Rate', 'Civilian Labor Force', 'All-Transactions House Price Index',
'New Private Housing Structures Authorized by Building Permits',
'Per Capita Personal Income',
'Net Migration Flow', 'Estimate of Median Household Income', 'Homeownership Rate',
'Burdened Households'
)
# no counties in puerto rico
counties_categories = filter(all_counties_MSAs, name %in% c('Counties', 'Parishes'), state != 'Puerto Rico')
if (continue_download) {
loaded_states = dbGetQuery(fred_sqlite, "select distinct state_name from us_county_indicators")
counties_categories = filter(counties_categories, !state %in% loaded_states$state_name)
}
if (clean_existing_data) {
dbGetQuery(fred_sqlite, 'drop table us_county_indicators')
}
# dbSendQuery(fred_sqlite, 'drop table us_county_indicators')
all_states_counties_downloaded = map(1:nrow(counties_categories), function(state_it){
this_state = counties_categories[state_it,]
state_name = this_state$state
cat('working on', state_name, '...\n')
state_id = this_state$state_id
state_counties_category = this_state$id
the_counties = fredr_category_children(state_counties_category)
n_counties = nrow(the_counties)
progress_bar <- txtProgressBar(min = 0, max = n_counties, style = 3)
all_counties_downloaded = lapply(1:n_counties, function(county_it){
this_county = the_counties[county_it,]
county_id = this_county$id
county_name = this_county$name
county_series = fredr_category_series(county_id) %>%
filter(seasonal_adjustment_short == 'NSA', frequency_short == 'A')
matched_county_series = map(county_substrings, function(substring){
county_series$title[str_detect(county_series$title, substring)]
}) %>%
unlist() %>%
unique()
selected_county_series = filter(county_series, title %in% matched_county_series)
all_series_downloaded = map(selected_county_series$id, function(x){
the_download = fredr_series_observations(x, frequency = 'a', aggregation_method = 'eop')
Sys.sleep(0.5) # the fred api complains about rate limit constraints
return(the_download)
}) %>%
bind_rows() %>%
left_join(
dplyr::select(selected_county_series, id, title),
by = c('series_id' = 'id')
)
series_download_clean = mutate(all_series_downloaded,
title_clean = str_replace(title, county_name, '') %>%
str_replace(pattern = '( [a-z]{2,4} )$', ''),
county_name = county_name,
county_id = county_id
) %>%
left_join(
county_series %>% dplyr::select(id, frequency_short, units, seasonal_adjustment_short),
by = c('series_id' = 'id')
)
setTxtProgressBar(progress_bar, county_it)
return(series_download_clean)
}) %>%
bind_rows() %>%
mutate(
state_name = state_name,
state_id = state_id
)
dbWriteTable(fred_sqlite, 'us_county_indicators', all_counties_downloaded, append = T)
close(progress_bar)
return(all_counties_downloaded)
})
dbDisconnect(fred_sqlite)
rm(list = ls())
gc()
# to do -- use sqlite as storage to work around download/rate limit issues
library(tidyverse)
library(fredr)
library(sqldf)
continue_download = T
clean_existing_data = F
setwd("~/Public_Policy/Projects/COVID-19/data")
fred_sqlite = dbConnect(SQLite(), dbname= "fred_sqlite.sqlite")
fredr_set_key('0437e7baffc7066bacb86efa56cc37c9')
states_category = 27281
desired_title_substrings = c("Per Capita Personal Income","Real Per Capita Personal Income",
"All-Transactions House Price Index",
"All Employees: Total Nonfarm",
"Average Weekly Wages for Employees in Private Establishments",
"Total Gross Domestic Product", "Total Per Capita Real Gross Domestic Product")
state_categories = fredr_category_children(states_category)
all_counties_MSAs = lapply(state_categories$id, function(state_id){
state_children = fredr_category_children(state_id)
msa_counties = filter(state_children, name %in% c('Counties', 'MSAs', 'Parishes'))
}) %>%
bind_rows() %>%
left_join(
state_categories %>% select(-parent_id) %>% rename(state = name),
by = c('parent_id' = 'id')
) %>%
rename(
state_id = parent_id
)
## all county level data for the US
county_substrings = c(
'Resident Population',
'Mean Commuting Time',
'Unemployment Rate', 'Civilian Labor Force', 'All-Transactions House Price Index',
'New Private Housing Structures Authorized by Building Permits',
'Per Capita Personal Income',
'Net Migration Flow', 'Estimate of Median Household Income', 'Homeownership Rate',
'Burdened Households'
)
# no counties in puerto rico
counties_categories = filter(all_counties_MSAs, name %in% c('Counties', 'Parishes'), state != 'Puerto Rico')
if (continue_download) {
loaded_states = dbGetQuery(fred_sqlite, "select distinct state_name from us_county_indicators")
counties_categories = filter(counties_categories, !state %in% loaded_states$state_name)
}
if (clean_existing_data) {
dbGetQuery(fred_sqlite, 'drop table us_county_indicators')
}
# dbSendQuery(fred_sqlite, 'drop table us_county_indicators')
all_states_counties_downloaded = map(1:nrow(counties_categories), function(state_it){
this_state = counties_categories[state_it,]
state_name = this_state$state
cat('working on', state_name, '...\n')
state_id = this_state$state_id
state_counties_category = this_state$id
the_counties = fredr_category_children(state_counties_category)
n_counties = nrow(the_counties)
progress_bar <- txtProgressBar(min = 0, max = n_counties, style = 3)
all_counties_downloaded = lapply(1:n_counties, function(county_it){
this_county = the_counties[county_it,]
county_id = this_county$id
county_name = this_county$name
county_series = fredr_category_series(county_id) %>%
filter(seasonal_adjustment_short == 'NSA', frequency_short == 'A')
matched_county_series = map(county_substrings, function(substring){
county_series$title[str_detect(county_series$title, substring)]
}) %>%
unlist() %>%
unique()
selected_county_series = filter(county_series, title %in% matched_county_series)
all_series_downloaded = map(selected_county_series$id, function(x){
the_download = fredr_series_observations(x, frequency = 'a', aggregation_method = 'eop')
Sys.sleep(0.75) # the fred api complains about rate limit constraints
return(the_download)
}) %>%
bind_rows() %>%
left_join(
dplyr::select(selected_county_series, id, title),
by = c('series_id' = 'id')
)
series_download_clean = mutate(all_series_downloaded,
title_clean = str_replace(title, county_name, '') %>%
str_replace(pattern = '( [a-z]{2,4} )$', ''),
county_name = county_name,
county_id = county_id
) %>%
left_join(
county_series %>% dplyr::select(id, frequency_short, units, seasonal_adjustment_short),
by = c('series_id' = 'id')
)
setTxtProgressBar(progress_bar, county_it)
return(series_download_clean)
}) %>%
bind_rows() %>%
mutate(
state_name = state_name,
state_id = state_id
)
dbWriteTable(fred_sqlite, 'us_county_indicators', all_counties_downloaded, append = T)
close(progress_bar)
return(all_counties_downloaded)
})
dbDisconnect(fred_sqlite)
head(state_economic_data)
