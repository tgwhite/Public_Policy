parent_id = NA,
incubation_start = 0
)
n_cases_generated = 1
continue_loop = T
while (continue_loop) {
loop_start = proc.time()
# print(generation)
if (n_cases_generated > current_susceptible) {
# cat('too many cases generated!\n', n_cases_generated, '\n')
n_cases_generated = current_susceptible
suseptible_by_id = current_susceptible - 1:n_cases_generated
# cat('n_cases_generated is now', n_cases_generated, '\n')
cases_gen_df = head(cases_gen_df, n_cases_generated)
} else {
suseptible_by_id = current_susceptible - 1:n_cases_generated
}
# cat('n_cases_generated:', n_cases_generated, '\n')
# cat('current_susceptible:', current_susceptible, '\n')
#
# suseptible_by_id = suseptible_by_id[suseptible_by_id > 0]
if (current_susceptible < 0) {
# cat('no more susceptible')
break
}
the_id = initial_susceptible - suseptible_by_id
incubation_time = rweibull(n_cases_generated, weibull_params$par[1], weibull_params$par[2])
incubation_start_date = cases_gen_df$incubation_start
incubation_end_date = incubation_start_date + incubation_time
prob_running_into_someone_else = suseptible_by_id / initial_susceptible
if (!is.null(lockdown_date)) {
lockdown_effects = ifelse(incubation_start_date >= lockdown_date, lockdown_effect, 1)
r0_adj = the_r0 * prob_running_into_someone_else * lockdown_effects
} else {
r0_adj = the_r0 * prob_running_into_someone_else
}
cases_generated = floor(r0_adj) + rbinom(length(r0_adj), 1, r0_adj - floor(r0_adj))
n_cases_generated = sum(cases_generated)
these_cases_df = data.table(
the_id = the_id %>% as.integer(),
generation = generation,
parent_id = cases_gen_df$parent_id,
incubation_time,
incubation_start_date,
incubation_end_date,
prob_running_into_someone_else,
r0_adj,
cases_generated
) %>%
setkey(the_id)
case_info_list[[length(case_info_list) + 1]] = these_cases_df
if (n_cases_generated > 0) {
# important to sort by cases generated so the recyling works
with_gen_cases = filter(these_cases_df, cases_generated > 0) %>% arrange(-cases_generated)
cases_gen_df = data.table(
parent_id = rep(with_gen_cases$the_id, length.out = n_cases_generated),
incubation_start = runif(n_cases_generated, with_gen_cases$incubation_start_date, with_gen_cases$incubation_end_date)
) %>%
setorder(incubation_start)
stopifnot(nrow(cases_gen_df) == n_cases_generated)
}
# print(proc.time() - loop_start)
generation = generation + 1
current_susceptible = min(suseptible_by_id)
continue_loop = n_cases_generated > 0 & current_susceptible > 0
}
case_info_df = rbindlist(case_info_list) %>%
mutate(
start_day = floor(incubation_start_date),
end_day = floor(incubation_end_date)
)
return(rbindlist(case_info_list))
}
covid_case_simulation = run_case_simulation(the_r0 = 2.5, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_lockdown = run_case_simulation(the_r0 = 2.5, lockdown_date = 15, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_mid_lockdown = run_case_simulation(the_r0 = 2.5, lockdown_date = 30, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day = dplyr::group_by(covid_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19',
with_lockdown = 'No'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_late = dplyr::group_by(covid_case_simulation_lockdown_late, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Late Lockdown',
with_lockdown = 'Yes'
)
flu_cases_by_day = dplyr::group_by(flu_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'Influenza',
with_lockdown = 'No'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
covid_case_simulation_lockdown = run_case_simulation(the_r0 = 2.5, lockdown_date = 7, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
29937 / 9248
the_r0 = rweibull(n_cases_generated, r0_params$par[1], r0_params$par[2])
hist(the_r0)
run_case_simulation = function(initial_susceptible = 20e6, the_r0, lockdown_date = NULL, lockdown_effect = NULL) {
current_susceptible = initial_susceptible
case_info_list = list()
generation = 0
cases_gen_df = tibble(
parent_id = NA,
incubation_start = 0
)
n_cases_generated = 1
continue_loop = T
while (continue_loop) {
loop_start = proc.time()
# print(generation)
if (n_cases_generated > current_susceptible) {
# cat('too many cases generated!\n', n_cases_generated, '\n')
n_cases_generated = current_susceptible
suseptible_by_id = current_susceptible - 1:n_cases_generated
# cat('n_cases_generated is now', n_cases_generated, '\n')
cases_gen_df = head(cases_gen_df, n_cases_generated)
} else {
suseptible_by_id = current_susceptible - 1:n_cases_generated
}
# cat('n_cases_generated:', n_cases_generated, '\n')
# cat('current_susceptible:', current_susceptible, '\n')
#
# suseptible_by_id = suseptible_by_id[suseptible_by_id > 0]
if (current_susceptible < 0) {
# cat('no more susceptible')
break
}
the_id = initial_susceptible - suseptible_by_id
incubation_time = rweibull(n_cases_generated, weibull_params$par[1], weibull_params$par[2])
incubation_start_date = cases_gen_df$incubation_start
incubation_end_date = incubation_start_date + incubation_time
prob_running_into_someone_else = suseptible_by_id / initial_susceptible
if (is.null(the_r0)) {
the_r0 = rweibull(n_cases_generated, r0_params$par[1], r0_params$par[2])
}
if (!is.null(lockdown_date)) {
lockdown_effects = ifelse(incubation_start_date >= lockdown_date, lockdown_effect, 1)
r0_adj = the_r0 * prob_running_into_someone_else * lockdown_effects
} else {
r0_adj = the_r0 * prob_running_into_someone_else
}
cases_generated = floor(r0_adj) + rbinom(length(r0_adj), 1, r0_adj - floor(r0_adj))
n_cases_generated = sum(cases_generated)
these_cases_df = data.table(
the_id = the_id %>% as.integer(),
generation = generation,
parent_id = cases_gen_df$parent_id,
incubation_time,
incubation_start_date,
incubation_end_date,
prob_running_into_someone_else,
r0_adj,
cases_generated
) %>%
setkey(the_id)
case_info_list[[length(case_info_list) + 1]] = these_cases_df
if (n_cases_generated > 0) {
# important to sort by cases generated so the recyling works
with_gen_cases = filter(these_cases_df, cases_generated > 0) %>% arrange(-cases_generated)
cases_gen_df = data.table(
parent_id = rep(with_gen_cases$the_id, length.out = n_cases_generated),
incubation_start = runif(n_cases_generated, with_gen_cases$incubation_start_date, with_gen_cases$incubation_end_date)
) %>%
setorder(incubation_start)
stopifnot(nrow(cases_gen_df) == n_cases_generated)
}
# print(proc.time() - loop_start)
generation = generation + 1
current_susceptible = min(suseptible_by_id)
continue_loop = n_cases_generated > 0 & current_susceptible > 0
}
case_info_df = rbindlist(case_info_list) %>%
mutate(
start_day = floor(incubation_start_date),
end_day = floor(incubation_end_date)
)
return(rbindlist(case_info_list))
}
covid_case_simulation = run_case_simulation(initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation = run_case_simulation(the_r0 = NULL, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_lockdown = run_case_simulation(the_r0 = NULL, lockdown_date = 7, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_mid_lockdown = run_case_simulation(the_r0 = NULL, lockdown_date = 30, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_case_simulation_lockdown_late = run_case_simulation(the_r0 = NULL,  lockdown_date = 45, lockdown_effect = 0.65, initial_susceptible = initial_susceptible) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, covid_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
flu_case_simulation = run_case_simulation(the_r0 = 1.3) %>%
mutate(
start_day = floor(incubation_start_date),
died = rbinom(length(the_id), 1, flu_ifr),
death_date = ifelse(died, start_day + 14, NA)
)
covid_cases_by_day = dplyr::group_by(covid_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19',
with_lockdown = 'No'
)
covid_cases_by_day_lockdown = dplyr::group_by(covid_case_simulation_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Early Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_mid = dplyr::group_by(covid_case_simulation_mid_lockdown, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Mid Lockdown',
with_lockdown = 'Yes'
)
covid_cases_by_day_lockdown_late = dplyr::group_by(covid_case_simulation_lockdown_late, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'COVID-19 Late Lockdown',
with_lockdown = 'Yes'
)
flu_cases_by_day = dplyr::group_by(flu_case_simulation, start_day) %>%
dplyr::summarize(
obs = n_distinct(the_id),
died = sum(died)
) %>%
mutate(
cum_obs = cumsum(obs),
Virus = 'Influenza',
with_lockdown = 'No'
)
stacked_stats = bind_rows(
covid_cases_by_day, flu_cases_by_day, covid_cases_by_day_lockdown_mid,
covid_cases_by_day_lockdown, covid_cases_by_day_lockdown_late)
group_by(stacked_stats, Virus, with_lockdown) %>%
summarize(
t_obs = sum(obs),
pct_infected = t_obs / initial_susceptible,
t_died = sum(died),
crude_mortality_rate = t_died / initial_susceptible,
infection_fatality_rate = t_died / t_obs,
time_period = as.numeric(max(start_day)-min(start_day))
)
ggplot(stacked_stats, aes(start_day, obs, fill = Virus)) +
geom_area(alpha = 0.3, position = 'identity')
17303/19.45e
17303/19.45e6
17303/(19.45e6*.2)
(17303/0.7)/(19.45e6*.2)
5000/17000
(12000/.7)/(8.8e6*.25)
17000 * 2
56000/.70
56000/.70/2
56000/.70/0.5
(56000/.70)
160000/38000
56000/.7
.8/.15
5*8000
5*80000
.40/.25
(56000/.70)
(56000/.70) * 2.5
Sys.getenv('plotly_username')
# https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html
# https://covidtracking.com/api/
# https://covid.ourworldindata.org
install.packages(c('R0', 'plotly','rnaturalearth', 'rnaturalearthdata',
'rgeos', 'data.table', 'countrycode', 'viridis'))
install.packages('tidyverse', 'data.table')
install.packages('tidyverse', 'data.table')
install.packages('data.table')
library(data.table)
library(data.table)
library(tidyverse)
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages('fuzzyjoin')
if (requireNamespace("IRanges", quietly = TRUE)) {
x1 <- data.frame(id1 = 1:3, start = c(1, 5, 10), end = c(3, 7, 15))
x2 <- data.frame(id2 = 1:3, start = c(2, 4, 16), end = c(4, 8, 20))
interval_inner_join(x1, x2)
# Allow them to be separated by a gap with a maximum:
interval_inner_join(x1, x2, maxgap = 1)   # let 1 join with 2
interval_inner_join(x1, x2, maxgap = 20)  # everything joins each other
# Require that they overlap by more than a particular amount
interval_inner_join(x1, x2, minoverlap = 3)
# other types of joins:
interval_full_join(x1, x2)
interval_left_join(x1, x2)
interval_right_join(x1, x2)
interval_semi_join(x1, x2)
interval_anti_join(x1, x2)
}
x1 <- data.frame(id1 = 1:3, start = c(1, 5, 10), end = c(3, 7, 15))
+     x2 <- data.frame(id2 = 1:3, start = c(2, 4, 16), end = c(4, 8, 20))
+
+     interval_inner_join(x1, x2)
+
+     # Allow them to be separated by a gap with a maximum:
+     interval_inner_join(x1, x2, maxgap = 1)   # let 1 join with 2
+     interval_inner_join(x1, x2, maxgap = 20)  # everything joins each other
+
+     # Require that they overlap by more than a particular amount
+     interval_inner_join(x1, x2, minoverlap = 3)
+
+     # other types of joins:
+     interval_full_join(x1, x2)
+     interval_left_join(x1, x2)
+     interval_right_join(x1, x2)
+     interval_semi_join(x1, x2)
+     interval_anti_join(x1, x2)
library(fuzzyjoin)
x1 <- data.frame(id1 = 1:3, start = c(1, 5, 10), end = c(3, 7, 15))
x2 <- data.frame(id2 = 1:3, start = c(2, 4, 16), end = c(4, 8, 20))
interval_inner_join(x1, x2)
install.packages('IRanges')
library(tidyverse)
library(data.table)
library(albersusa)
us_sf <- usa_sf("laea")
setwd("~/Public_Policy/Projects/Voting/data")
list.files()
heritage_voterfraud_database = read_csv("heritage_voterfraud_database.csv")
heritage_voterfraud_database
stats_by_year = group_by(heritage_voterfraud_database, Year) %>%
summarize(
count = n()
)
ggplot(stats_by_year, aes(Year, count)) +
geom_bar(stat = 'identity')
ggplot(stats_by_year, aes(Year, count)) +
geom_bar(stat = 'identity') %>%
filter(Year >= 2009, Year <= 2018)
yearly_odds_lightning = 1/1222000
yearly_odds_lightning
not_struck = 1-yearly_odds_lightning
not_struck^50
1-(not_struck^50)
odds_struck_in_50_years = 1-(not_struck^50)
odds_struck_in_50_years * 100000
odds_struck_in_50_years = 1-(not_struck^80)
odds_struck_in_50_years * 100000
odds_struck_in_50_years
1/15300
odds_struck_in_50_years
stats_by_year
voter_fraud_counts_2019_2018
voter_fraud_counts_2019_2018 = filter(stats_by_year, Year >= 2009, Year <= 2018)
voter_fraud_counts_2019_2018
sum(voter_fraud_counts_2019_2018$count)
total_cases = sum(voter_fraud_counts_2019_2018$count)
270 / 330e6
1/1222000
lighning_strikes_per_year = 270
voter_fraud_counts_2019_2018
total_cases
annual_avg_cases = total_cases / length(2018:2009)
annual_avg_cases
total_cases
length(2018:2009)
stats_by_year
total_cases
annual_avg_cases
67 / 270
270 / 67
